<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en_US"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://azure.github.io/AppService/feed.xml" rel="self" type="application/atom+xml" /><link href="https://azure.github.io/AppService/" rel="alternate" type="text/html" hreflang="en_US" /><updated>2023-04-30T00:09:23+00:00</updated><id>https://azure.github.io/AppService/feed.xml</id><title type="html">Azure App Service</title><subtitle>Announcements, updates, and release notes from the Azure App Service product team.</subtitle><author><name>Azure App Service</name></author><entry><title type="html">Updates to App Service Azure Policies that monitor language versions</title><link href="https://azure.github.io/AppService/2023/04/24/App-service-language-version-policy-update.html" rel="alternate" type="text/html" title="Updates to App Service Azure Policies that monitor language versions" /><published>2023-04-24T00:00:00+00:00</published><updated>2023-04-24T00:00:00+00:00</updated><id>https://azure.github.io/AppService/2023/04/24/App-service-language-version-policy-update</id><content type="html" xml:base="https://azure.github.io/AppService/2023/04/24/App-service-language-version-policy-update.html"><![CDATA[<p><a href="https://learn.microsoft.com/azure/governance/policy/overview">Azure Policy</a> for App Service has the following built-in policies that ensure you are using the latest versions of certain languages that are available on the platform.</p>

<ol>
  <li><strong>App Service apps that use Java should use the latest ‘Java version’</strong></li>
  <li><strong>App Service apps that use Python should use the latest ‘Python version’</strong></li>
  <li><strong>App Service apps that use PHP should use the latest ‘PHP version’</strong></li>
  <li><strong>Function apps that use Java should use the latest ‘Java version’</strong></li>
  <li><strong>Function apps that use Python should use the latest ‘Python version’</strong></li>
</ol>

<h2 id="updates">Updates</h2>

<p>We know that for certain customers, using the latest version of a language or runtime isn’t always possible. Additionally, with the variations and possible language versions available, we want to provide a way for our customers to have more flexibility when monitoring the compliance of languages used by their apps. For these reasons, the above policies have been modified. The following changes have been implemented and will be visible in the Azure portal in the next few weeks.</p>

<ol>
  <li>The policies no longer have a hard-coded value for the language version they’re monitoring. Instead, the user must specify a version that aligns with their requirements when assigning these policies.
    <ol>
      <li>When assigning these policies, users will be prompted to specify a language version.</li>
    </ol>
  </li>
  <li>The policies have been renamed to align with this updated scope. Below are the new names.
    <ol>
      <li><strong>App Service apps that use Java should use a specified ‘Java version’</strong></li>
      <li><strong>App Service apps that use Python should use a specified ‘Python version’</strong></li>
      <li><strong>App Service apps that use PHP should use a specified ‘PHP version’</strong></li>
      <li><strong>Function apps that use Java should use a specified ‘Java version’</strong></li>
      <li><strong>Function apps that use Python should use a specified ‘Python version’</strong></li>
    </ol>
  </li>
  <li>The policies have been removed from the Azure Security Baseline and Microsoft Defender for Cloud initiatives.
    <ol>
      <li>The policies can still be assigned and even added to a Microsoft Defender for Cloud initiative, however they won’t be automatically assigned as they previously were.</li>
    </ol>
  </li>
  <li>Equivalent policies have been created to monitor compliance for slots. These must be assigned in addition to the policies that monitor the main site in order to ensure monitoring is in place for all App Service resources.
    <ol>
      <li><strong>App Service app slots that use Python should use a specified ‘Python version’</strong></li>
      <li><strong>Function app slots that use Python should use a specified ‘Python version’</strong></li>
      <li><strong>App Service app slots that use PHP should use a specified ‘PHP version’</strong></li>
      <li><strong>App Service app slots that use Java should use a specified ‘Java version’</strong></li>
      <li><strong>Function app slots that use Java should use a specified ‘Java version’</strong></li>
    </ol>
  </li>
</ol>

<p>There are also a couple limitations to be aware of when using these policies.</p>

<ol>
  <li>They’re scoped to apps on Linux App Service only.
    <ol>
      <li>If you require monitoring for Windows apps, you can use the existing policies as a reference to create Windows specific custom policies. For more information on building and assigning custom policies, see <a href="https://learn.microsoft.com/azure/governance/policy/tutorials/create-custom-policy-definition">Tutorial: Create a custom policy definition</a>.</li>
    </ol>
  </li>
  <li>These policies use text based matching on a “free-text” field to monitor compliance. Ensure you have proper controls in place to prevent unexpected changes to language versions.</li>
</ol>

<h2 id="required-actions">Required actions</h2>

<p>These policy updates will have no impact on existing policy assignments. If you have the old version of these policies assigned, they will continue to function without interruption. In order to use the new versions of these policies, you must create new policy assignments. We encourage you to take this action as soon as possible as the old versions of these policies are prone to false negatives.</p>]]></content><author><name>Azure App Service</name></author><summary type="html"><![CDATA[Azure Policy for App Service has the following built-in policies that ensure you are using the latest versions of certain languages that are available on the platform.]]></summary></entry><entry><title type="html">Estimate your cost savings by migrating to App Service Environment v3</title><link href="https://azure.github.io/AppService/2023/03/02/App-service-environment-v3-pricing.html" rel="alternate" type="text/html" title="Estimate your cost savings by migrating to App Service Environment v3" /><published>2023-03-02T00:00:00+00:00</published><updated>2023-03-02T00:00:00+00:00</updated><id>https://azure.github.io/AppService/2023/03/02/App-service-environment-v3-pricing</id><content type="html" xml:base="https://azure.github.io/AppService/2023/03/02/App-service-environment-v3-pricing.html"><![CDATA[<p>If you weren’t already aware, App Service Environment v1 and v2 is <a href="https://azure.microsoft.com/updates/app-service-environment-version-1-and-version-2-will-be-retired-on-31-august-2024/">retiring on 31 August, 2024</a>. There are many reasons to <a href="https://aka.ms/asemigration">migrate to App Service Environment v3</a> including better performance, faster scaling, and reduced overhead since networking dependency management has been greatly simplified. One benefit that stands out that we understand might need some additional explanation is that App Service Environment v3 is often cheaper than previous versions. With the removal of the stamp fee and larger instance sizes per respective SKU with previous versions, App Service Environment v3 can help you do more with less and reduce your monthly spend if you’re familiar with the updates.</p>

<p>In this post, we’ll go over a couple common scenarios that will help you better understand App Service Environment v3 pricing and how it compares to your pricing model on App Service Environment v1 or v2. We know there are many scenarios out there, so hopefully one of the ones shared here can be used as an example for you to better understand your situation. <a href="https://azure.microsoft.com/pricing/calculator/">The Azure Pricing Calculator</a> is a great resource and will be referenced throughout this post for each scenario. Note that estimates here are based on the prices applicable on the day the estimate was created. Actual total estimates may vary. For the most up-to-date estimate, click the link for each scenario. Refer to the <a href="https://azure.microsoft.com/pricing/details/app-service/windows/">App Service pricing page</a> for more information.</p>

<blockquote>
  <p>NOTE: Unless otherwise indicated, all scenarios are calculated using costs based on Linux $USD pricing in East US. The payment option is set to monthly to simplify cost comparisons.</p>
</blockquote>

<h2 id="basic-scenarios">Basic scenarios</h2>

<h3 id="scenario-1-scale-down-your-app-service-plans-with-pay-as-you-go-pricing">Scenario 1: Scale down your App Service plans with pay-as-you-go pricing</h3>

<p>The App Service plan SKUs available for App Service Environment v3 run on the Isolated v2 tier. This is not to be confused with the tier used by App Service Environment v2, which is the Isolated tier. Below are the corresponding service plans for each available tier. Notice that for the Isolated v2 tier, the number of cores and amount of RAM is effectively doubled. We’ll use this information in this scenario. Additionally, there are <a href="https://azure.github.io/AppService/2022/12/01/Announcing-Larger-Isolatedv2-SKUs.html">new larger SKUs available with the Isolated v2 tier</a> that were not previously available with the older version.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Isolated</th>
      <th style="text-align: center">Cores</th>
      <th style="text-align: center">RAM (GB)</th>
      <th style="text-align: center"> </th>
      <th style="text-align: center">Isolated v2</th>
      <th style="text-align: center">Cores</th>
      <th style="text-align: center">RAM (GB)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">I1</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">3.5</td>
      <td style="text-align: center">→</td>
      <td style="text-align: center">I1v2</td>
      <td style="text-align: center">2</td>
      <td style="text-align: center">8</td>
    </tr>
    <tr>
      <td style="text-align: center">I2</td>
      <td style="text-align: center">2</td>
      <td style="text-align: center">7</td>
      <td style="text-align: center">→</td>
      <td style="text-align: center">I2v2</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">16</td>
    </tr>
    <tr>
      <td style="text-align: center">I3</td>
      <td style="text-align: center">4</td>
      <td style="text-align: center">14</td>
      <td style="text-align: center">→</td>
      <td style="text-align: center">I3v2</td>
      <td style="text-align: center">8</td>
      <td style="text-align: center">32</td>
    </tr>
    <tr>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: center">I4v2</td>
      <td style="text-align: center">16</td>
      <td style="text-align: center">64</td>
    </tr>
    <tr>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: center">I5v2</td>
      <td style="text-align: center">32</td>
      <td style="text-align: center">128</td>
    </tr>
    <tr>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: center">I6v2</td>
      <td style="text-align: center">64</td>
      <td style="text-align: center">256</td>
    </tr>
  </tbody>
</table>

<p>In this scenario, you are using an App Service Environment v2 with 1 I2 plan. You require 2 cores and 7 GB RAM. You are using pay-as-you-go pricing.</p>

<p>On App Service Environment v2, your monthly cost is:</p>

<p><a href="https://azure.com/e/45f5b42a6f144e448fd78e93afa77e6f">Stamp fee + 1(I2) = $991.34 + $416.10 = <strong>$1,407.44</strong></a></p>

<p>If you were to migrate this exact workload to App Service Environment v3, you would be able to scale down from I2 to I1v2 since the Isolated v2 equivalent tier has double the cores and RAM. Your monthly cost on App Service Environment v3 would be:</p>

<p><a href="https://azure.com/e/e88da9f9cacb4e3ab0a0179f7521f316">1(I1v2) = <strong>$281.78</strong></a></p>

<p>As you can see, this is a significant cost savings since you were able to use a smaller tier and the stamp fee is no longer applicable. If you don’t scale down after migrating to v3, you will be over-provisioned and incur unnecessary charges, some of which may make your App Service Environment v3 more expensive than your old environment.</p>

<h3 id="scenario-2-3-year-reserved-instance-pricing-and-savings-plan">Scenario 2: 3 year reserved instance pricing and savings plan</h3>

<p><a href="https://azure.microsoft.com/reservations/">Reservations or reserved instance pricing</a> is a discount you can receive if you know what your usage will look like for the next 1 to 3 years. On App Service Environment v2, reservations are supported for the stamp fee. On App Service Environment v3, there is no stamp fee and reservations are supported on the instances themselves.</p>

<p>The following scenario will use the same requirements as Scenario 1, but instead of using pay-as-you-go pricing, you will now use 3 year reserved instance pricing since you know your requirements will stay relatively flat over the next 3 years. With reservations, you can pay upfront or monthly. For ease of comparison between the scenarios, monthly payments will be used.</p>

<p>On App Service Environment v2 with a 3 year reservation, your monthly cost would be:</p>

<p><a href="https://azure.com/e/062d229d8ccb4f48a6d5415d0a25d3b3">Stamp fee + 1(I2) = $594.77 + $416.10 = <strong>$1,010.87</strong></a></p>

<p>Notice the 40% reduction in the stamp fee by using reservations. On App Service Environment v3, your monthly cost would be:</p>

<p><a href="https://azure.com/e/43b6f63e28004295bce5b7bfc921a83c">1(I1v2) = <strong>$127.00</strong></a></p>

<p>There’s a 55% reduction in the monthly cost as a result of using reserved instance pricing.</p>

<p><a href="https://azure.microsoft.com/pricing/offers/savings-plan-compute/">Azure savings plan for compute</a> is another option that is only available on App Service Environment v3. Azure savings plan for compute is a flexible pricing model that provides savings up to 65 percent off pay-as-you-go pricing when you commit to spend a fixed hourly amount on compute services for one or three years.</p>

<p>For this scenario, your cost on App Service Environment v3 with a 3 year savings plan would be:</p>

<p><a href="https://azure.com/e/486568f1ea9747fea19199c2ec9be559">1(I1v2) = <strong>$154.98</strong></a></p>

<p><img src="/AppService/media/2023/03/scale-down-asp.png" alt="" /></p>

<h3 id="scenario-3-break-even-point">Scenario 3: Break even point</h3>

<p>So far we’ve demonstrated the ways migrating to App Service Environment v3 can save you money. However, there are some cases where this may not be the case. Let’s take for example you have an App Service Environment v2 with a single I1 instance and you’re using pay-as-you-go pricing. Your monthly cost would be:</p>

<p><a href="https://azure.com/e/ac89a70062a240e1b990304052d49fad">Stamp fee + 1(I1) = $991.34 + $208.05 = <strong>$1,199.39</strong></a></p>

<p>If you migrate this environment to v3, your monthly cost would be:</p>

<p><a href="https://azure.com/e/e88da9f9cacb4e3ab0a0179f7521f316">1(I1v2) = <strong>$281.78</strong></a></p>

<p>This is a significant cost reduction, just know that you’re now over-provisioned since you now have double the cores and RAM, which you may not need. This is not an issue since the new environment is so much cheaper. However, when you start to have many I1 instances in a single App Service Environment, for example because you use this environment for dev or test workloads across multiple different apps and teams, you need to consider the break even point if you migrate to App Service Environment v3.</p>

<p>For this scenario, your App Service Environment v2 has 14 I1 instances. Because of how your environment is being used by your team, you can not reduce the number of instances or use a larger instance that has the same effective capacity. Your monthly cost is:</p>

<p><a href="https://azure.com/e/bd1dce4b5c8f4d6d807ed3c4ae78fcae">Stamp fee + 14(I1) = $991.34 + $2,912.70 = <strong>$3,904.04</strong></a></p>

<p>A migration of this environment to v3 would lead to the following monthly cost:</p>

<p><a href="https://azure.com/e/95a729b2ee2849c6847d88ef63140617">14(I1v2) = <strong>$3,944.92</strong></a></p>

<p>As you can see, your App Service Environment v3 is slightly more expensive than your v2. As you start adding more I1 instances, and therefore need more I1v2 instances when you migrate, the difference in price becomes even more significant and your v3 will get more and more expensive than your v2. Unfortunately, if you’re in this situation, you may have to plan for a higher monthly cost.</p>

<blockquote>
  <p>NOTE: This calculation was done with Linux $USD prices in East US. Break even points will vary due to price variances in the various regions. For an estimate that reflects your situation, see <a href="https://azure.microsoft.com/pricing/calculator/">the Azure Pricing Calculator</a>.</p>
</blockquote>

<p>The following chart visually depicts the break even point at the time of releasing this blog post using the selected region and price offering where App Service Environment v3 becomes more expensive than v2. If you need more than 13 of our smallest instance offering, you fall into this scenario. There may be other scenarios where this is also the case.</p>

<p><img src="/AppService/media/2023/03/break-even-point.png" alt="" /></p>

<h2 id="advanced-scenarios">Advanced scenarios</h2>

<p>The first three scenarios were basic and were intended to give you a quick sense of how pricing works on App Service Environment v3. Realistically, you’ll have many more instances and probably be using a combination of the SKUs. The following scenarios will give you a better sense of the cost saving opportunities for these use cases.</p>

<h3 id="scenario-4-sku-mix">Scenario 4: SKU mix</h3>

<p>To accommodate various app types in your App Service Environment v2, you use a combination of the tiers in various quantities. The first estimate will be using pay-as-you-go pricing, and the second will use a 3 year reservation on the stamp fee.</p>

<p><a href="https://azure.com/e/6139e2a572ab4d82a263278e08f61eaa">Stamp fee + 20(I1) + 10(I2) + 5(I3) = $991.34 + $12,483.00 = <strong>$13,474.34</strong></a></p>

<p>With a 3 year reservation, this becomes:</p>

<p><a href="https://azure.com/e/087b3549856945a1b620ad58ccced0c6">Stamp fee + 20(I1) + 10(I2) + 5(I3) = $594.77 + $12,483.00 = <strong>$13,077.77</strong></a></p>

<p>You can start to see here that as you consume more resources, the reservations available on App Service Environment v2 don’t significantly reduce monthly costs since they only apply to the stamp fee.</p>

<p>On App Service Environment v3, you require the same respective core and RAM capacity. There are various paths you can take here depending on your specific requirements - you can keep the same number of instances and just scale them down, or you can reduce the total number instance you are using. For this scenario, we’ll do the following:</p>

<ul>
  <li>20 I1 → 10 I1v2</li>
  <li>10 I2 → 10 I1v2</li>
  <li>5 I3 → 5 I2v2</li>
</ul>

<p>With pay-as-you-go pricing, this would be:</p>

<p><a href="https://azure.com/e/43a72b6bf449498f822a82cb0396e0ba">20(I1v2) + 5(I2v2) = <strong>$8,453.40</strong></a></p>

<p>And with a 3 year reservation:</p>

<p><a href="https://azure.com/e/99b162b41e944bbabfabf7f2d4d424bb">20(I1v2) + 5(I2v2) = <strong>$3,809.98</strong></a></p>

<p>At this point, you’re reducing your costs by over 70%. This is where the cost saving benefits of App Service Environment v3 really start to become significant. Even if you were to use pay-as-you-go pricing, you still see cost savings in the form of thousands of dollars per month.</p>

<p><img src="/AppService/media/2023/03/sku-mix.png" alt="" /></p>

<h3 id="scenario-5-migration-to-app-service-environment-v3-using-the-migration-feature">Scenario 5: Migration to App Service Environment v3 using the migration feature</h3>

<p>The <a href="https://aka.ms/asemigration">migration feature</a> was developed to automate the migration of App Service Environments to v3. It’s an in-place migration, meaning it uses the same subnet your current environment is in. During the migration, your current environment is deleted and an App Service Environment v3 is spun up. All of your instances are automatically converted to their Isolated v2 counterparts (for example I2 is converted to I2v2). Since the Isolated v2 instances are larger, you’ll be over-provisioned if you’re still expecting the same traffic volume. This is a direct scenario where you have the opportunity to scale your instances down similar to what was done in <a href="#scenario-4-sku-mix">Scenario 4</a>.</p>

<p>To keep things consistent, we’ll keep the requirements for this scenario the same as <a href="#scenario-4-sku-mix">Scenario 4</a>. Your capacity requirements will not change after migration. Prior to migrating, your monthly pay-as-you-go cost is:</p>

<p><a href="https://azure.com/e/6139e2a572ab4d82a263278e08f61eaa">Stamp fee + 20(I1) + 10(I2) + 5(I3) = $991.34 + $12,483.00 = <strong>$13,474.34</strong></a></p>

<p>Immediately after migrating using the migration feature, your instances have been converted and you have the following leading to a higher monthly cost than what you had on App Service Environment v2.</p>

<ul>
  <li>20 I1 → 20 I1v2</li>
  <li>10 I2 → 10 I2v2</li>
  <li>5 I3 → 5 I3v2</li>
</ul>

<p><a href="https://azure.com/e/34c240000f004539bbf921bd2b5813c8">20(I1v2) + 10(I2v2) + 5(I3v2) = <strong>$16,906.80</strong></a></p>

<p>You’re significantly over-provisioned, so you scale down and immediately reduce your monthly cost by 50%.</p>

<ul>
  <li>20 I1v2 → 10 I1v2</li>
  <li>10 I2v2 → 10 I1v2</li>
  <li>5 I3v2 → 5 I2v2</li>
</ul>

<p><a href="https://azure.com/e/84abb76b9de64bd6bd639a0dcc846545">20(I1v2) + 5(I2v2) = <strong>$8,453.40</strong></a></p>

<p>You should plan how you will scale down prior to migrating to ensure you don’t get hit with unexpected costs due to being over-provisioned. You’ll be able to scale down immediately after the migration finishes.</p>

<p><img src="/AppService/media/2023/03/migration-feature.png" alt="" /></p>

<h3 id="scenario-6-reduce-total-number-of-app-service-environments">Scenario 6: Reduce total number of App Service Environments</h3>

<p>App Service Environments are a great choice for customers that need to scale beyond the limits of the App Service public multi-tenant offering of 30 App Service plan instances. But even the 200 instance limit with App Service Environments may not be enough for some customers. In that case, they need to create multiple App Service Environments.</p>

<p>For this scenario, you have 3 App Service Environment v2s all at max capacity with 200 I3 instances in each. Your monthly cost with pay-as-you-go pricing is:</p>

<p><a href="https://azure.com/e/7d160cd7d861450bad0c999f7ba19b5b">3(Stamp fee + 200(I3)) = <strong>$505,268.04</strong></a></p>

<p>With App Service Environment v3, you have a couple options for how to proceed. You can continue using 3 App Service Environment v3s and just scale down to a smaller SKU, or you can reduce the number of environments by taking advantage of the new larger SKUs.</p>

<p>Keeping the same number of environments and scaling down would lead to a monthly cost with pay-as-you-go pricing of:</p>

<p><a href="https://azure.com/e/58a00f7ada9746339bb09f8bf20f87a0">3(200(I2v2)) = <strong>$338,136.00</strong></a></p>

<p>This would be further reduced if you were to use a reservation or savings plan.</p>

<p>If you wanted to reduce the total number of App Service Environments, this would be possible by using the larger SKUs that are only offered on App Service Environment v3. In addition to the potential cost savings you would see by reducing your instance counts and number of environments, you would also realize additional cost savings in the form of overhead since management would be over fewer resources.</p>

<p>For this scenario, the requirement is to have the equivalent of 600 I3 instances, or 2400 cores and 8,400 GB RAM. With App Service Environment v3, this can be accomplished with a single App Service Environment with 38 I6v2 instances. The pay-as-you-go monthly cost would be:</p>

<p><a href="https://azure.com/e/8be70aee48704f0aa7fc2ef9e909b017">38(I6v2) = 38($9,016.96) = <strong>$342,644.48</strong></a></p>

<p>This is just over the cost of the maintaining 3 App Service Environment v3s, but this doesn’t take into account the extra overhead involved in managing multiple resources. With 3 year reserved instance pricing, this monthly cost would be reduced significantly.</p>

<p><a href="https://azure.com/e/7baef8ad75444c43bba7dd42b0492532">38(I6v2) = 38($3,831.055) = <strong>$145,580.07</strong></a></p>

<p><img src="/AppService/media/2023/03/reduce-number-ase.png" alt="" /></p>

<h2 id="zone-redundant-app-service-environment-v3-pricing">Zone redundant App Service Environment v3 pricing</h2>

<p><a href="https://learn.microsoft.com/azure/reliability/migrate-app-service-environment">Zone redundant App Service Environment</a> deployments are only supported on App Service Environment v3. There is no additional charge for enabling zone redundancy if you have 9 or more instances. These 9 instances can be made up of any combination of the available SKUs. For example, you can have 9 I1v2s or 3 I1v2s, 3 I2v2s, and 3 I3v2s. You will only be charged for those 9 instances.</p>

<p>If you enable zone redundancy, and if your environment has fewer than 9 total instances, you’ll be charged the difference if the form of a minimum instance fee which uses the Windows I1v2 instance price. For example, if you have a zone redundant App Service Environment v3 with 3 Linux I3v2 instances, you will be charged for those 3 I3v2 instances at the standard Linux rate, plus 6 Windows I1v2 instances.</p>]]></content><author><name>Azure App Service</name></author><summary type="html"><![CDATA[If you weren’t already aware, App Service Environment v1 and v2 is retiring on 31 August, 2024. There are many reasons to migrate to App Service Environment v3 including better performance, faster scaling, and reduced overhead since networking dependency management has been greatly simplified. One benefit that stands out that we understand might need some additional explanation is that App Service Environment v3 is often cheaper than previous versions. With the removal of the stamp fee and larger instance sizes per respective SKU with previous versions, App Service Environment v3 can help you do more with less and reduce your monthly spend if you’re familiar with the updates.]]></summary></entry><entry><title type="html">Updates to App Service Overview Blade for Custom Domains</title><link href="https://azure.github.io/AppService/2023/02/03/Custom-domain-ux-updates.html" rel="alternate" type="text/html" title="Updates to App Service Overview Blade for Custom Domains" /><published>2023-02-03T00:00:00+00:00</published><updated>2023-02-03T00:00:00+00:00</updated><id>https://azure.github.io/AppService/2023/02/03/Custom-domain-ux-updates</id><content type="html" xml:base="https://azure.github.io/AppService/2023/02/03/Custom-domain-ux-updates.html"><![CDATA[<p>You may have noticed that we recently rolled out a change in the “Essentials” section of the App Service “Overview” blade in the Azure portal where the URL that is displayed is the default URL for your app. Previously, under certain conditions, there was logic that would display the custom domain you added to your app. For example, if you added the custom domain “app.contoso.com” to your app, the URL displayed on the “Overview” blade would show “https://app.contoso.com” instead of the default URL. If your app was hosted on an App Service Environment, and you added a custom domain suffix to your App Service Environment, the “Overview” blade would show the corresponding URL with that custom domain suffix.</p>

<p>We decided to change that behavior to only show the default URL because we were finding that the logic for deciding which URL to show was not meeting the needs of all customers. For example, if a customer added more than one custom domain to an app, which one should be displayed? Showing the default domain ensures consistency for all customers. Additionally, we can’t ensure that when adding a custom domain that that domain will immediately function as intended - there may be additional DNS changes required. We have more confidence that providing a link to the default domain on the “Overview” blade will lead to more successful attempts to reach an app.</p>

<p><img src="/AppService/media/2023/02/app-service-overview.png" alt="" /></p>

<p>We were also made aware that some customers have created alerts based on the URL that is displayed in the “Essentials” section of the “Overview” blade - they use the value that is given to determine whether the custom domain they have added to their app has been applied. If this alert/check is a requirement for customers, the recommendation is to use the “Custom domains” blade to validate the domains added to their apps. That blade will show all domains added to the app and should be considered the source of truth. It also gives additional information that will help validate the security of the custom domains. In the following screenshot, the app shown is hosted in an App Service Environment with the custom domain suffix “antares-test.net”. You can see the default domain for this app as well as the domain using the custom domain suffix. If we were to add a custom domain at the app level, for example “app.contoso.com”, that would also be displayed in this blade.</p>

<p><img src="/AppService/media/2023/02/app-service-custom-domains-blade.png" alt="" /></p>

<h2 id="upcoming-changes">Upcoming changes</h2>

<p>We have an update to the “Overview” blade rolling out in the next few weeks that should help customers quickly identify the custom domains they’ve added to their apps directly from the “Overview” blade. The following is a UX mock of the “Overview” blade showing the upcoming changes that we are implementing.</p>

<p><img src="/AppService/media/2023/02/app-service-overview-mock.png" alt="" /></p>

<ul>
  <li>“URL” in the “Essentials” section will be renamed “Default domain” and the default domain will be displayed.</li>
  <li>A new section under the “Properties” tab will be added called “Domains”, which will list the default domain, the App Service Environment domain if the app is hosted in an App Service Environment with a custom domain suffix, and the custom domain if one is added at the app level. If more than one custom domain is added at the app level, the number of custom domains will be given with a link to the “Custom domains” blade.</li>
</ul>

<p>We hope these changes will provide more clarity for customers. Feedback is welcome as we are always looking to improve our user experience.</p>]]></content><author><name>Azure App Service</name></author><summary type="html"><![CDATA[You may have noticed that we recently rolled out a change in the “Essentials” section of the App Service “Overview” blade in the Azure portal where the URL that is displayed is the default URL for your app. Previously, under certain conditions, there was logic that would display the custom domain you added to your app. For example, if you added the custom domain “app.contoso.com” to your app, the URL displayed on the “Overview” blade would show “https://app.contoso.com” instead of the default URL. If your app was hosted on an App Service Environment, and you added a custom domain suffix to your App Service Environment, the “Overview” blade would show the corresponding URL with that custom domain suffix.]]></summary></entry><entry><title type="html">Azure Workbook to help run App Service Plans and App Service Environments</title><link href="https://azure.github.io/AppService/2023/01/30/Azure-workbooks-to-help-run-App-Service.html" rel="alternate" type="text/html" title="Azure Workbook to help run App Service Plans and App Service Environments" /><published>2023-01-30T00:00:00+00:00</published><updated>2023-01-30T00:00:00+00:00</updated><id>https://azure.github.io/AppService/2023/01/30/Azure-workbooks-to-help-run-App-Service</id><content type="html" xml:base="https://azure.github.io/AppService/2023/01/30/Azure-workbooks-to-help-run-App-Service.html"><![CDATA[<p>Anyone running App Service Plan, or App Service Environment at scale should consider if they are running it efficiently. An App Service Plan is so easy to use that we often throw more and more applications at one, without stopping to think about the impact that might have.</p>

<p>Different App Service Plan SKUs have different limits. Running an app that consumes 1GB of ram on one SKU could be a concern, but maybe not on another.</p>

<p>What about CPU? If you have 16 v-cores then it might not be important to run a CPU intensive app. But run that same app on an App Service plan with fewer cores and you could start to impact other applications on the same plan.</p>

<p>Even IO heavy applications that use little RAM and CPU can have impacts. Different App Service Plan SKUs have different amounts of outbound sockets available to them. Every time you make an outbound call you may consume these ports. An app that doesn’t have a connection pool and makes lots of tiny outbound calls could cause another well-behaved app to start throwing errors. There are also specific limits on outbound connections to Public IP addresses that consume SNAT ports. This information isn’t exposed via metrics though.</p>

<p>All of these are members of a phenomenon known as Noisy Neighbour Syndrome. They look obvious but it’s not always easy to work out which app is misbehaving.</p>

<p>That’s individual applications - there are also constraint limits on the platform. An App Service Plan can have a maximum of 100 instances attached to it. If it’s in an App Service Environment then you’ve got a maximum of 200 instances that can spread across plans. When you’re running at scale it’s easy to start to come close to these limits. But it’s not easy to see how many instances are used across all an App Service Environment.</p>

<p>App Services can also have varying amounts of Hybrid connections. Knowing how many are currently in use against an ASP can help you decide which ASP to place new Apps in that use Hybrid Connections.</p>

<h2 id="monitor-your-metrics-with-azure-workbooks">Monitor your metrics with Azure Workbooks</h2>

<p>All this data is available in various forms, but it’s not been brought together to make it simple to consume. Azure Metrics can capture CPU / RAM / SNAT ports. The resource graph can tell you the SKU of your ASP’s, how many instances are attached to them, and which ASE they belong to.</p>

<p>To make it easy to consume we can build an Azure Workbook to surface all this information. Workbooks are awesome – they allow us to build a dashboard which can pull data from a multitude of sources in Azure and present it in a simple clean interface.</p>

<p>I’ve built a workbook to present a “single pane of glass” that can give you visibility into your ASE’s and ASP’s. Having insights into the limits will hopefully make it easier for you to run ASP and ASE at scale.</p>

<h2 id="deploy-the-sample-workbook">Deploy the sample Workbook</h2>

<p>To try it out clone the repository from Github: <a href="https://github.com/graemefoster/AzureWorkbooks">App Service Azure Workbook</a>.</p>

<p>And then from a CLI run the following. Be sure to replace the placeholder with your resource group name.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az deployment group create <span class="nt">--resource-group</span> &lt;rg&gt; <span class="nt">--template-file</span> .<span class="se">\i</span>nfra<span class="se">\d</span>eploy.bicep
</code></pre></div></div>

<p>You can then access the workbook from the Resource Group you deployed to in the Azure Portal.</p>

<p>You’ll need to select some subscriptions from the Subscription parameter box to get going:</p>

<p><img src="/AppService/media/2023/01/workbook_sub_select.png" alt="" /></p>

<p>Once you’ve done that the Workbook will load some summary data for all the ASP’s in the subscription:</p>

<p><img src="/AppService/media/2023/01/workbook_asp_summary.png" alt="" /></p>

<p>This will show you how many instances / how many apps are associated with the ASP, the tiering, and how many Hybrid Connections are available in total for the ASP.</p>

<p>Selecting one of the rows will populate more insights into the ASP:</p>

<p><img src="/AppService/media/2023/01/workbook_asp_details.png" alt="" /></p>

<p>You’ll see the overall CPU / Memory Percentage used across the ASP, along with the total Hybrid Connections active on it.</p>

<p>To the right is a summary of all the Apps in the ASP, and the average CPU / Private Bytes / Requests Per Minute, and App Connections being made by them.</p>

<p>The final element is a set of charts showing some metrics against each app in the ASP. CPU / Private Bytes. It’s similar data as shown above, but represented visually to allow you to spot anything unusual.</p>

<p><img src="/AppService/media/2023/01/workbook_asp_metrics.png" alt="" /></p>

<p>Hopefully these insights allow you to ‘right-size’ your App Service Plans and Environments, making them more efficient, more scalable, and more cost effective to run.</p>]]></content><author><name>Azure App Service</name></author><summary type="html"><![CDATA[Anyone running App Service Plan, or App Service Environment at scale should consider if they are running it efficiently. An App Service Plan is so easy to use that we often throw more and more applications at one, without stopping to think about the impact that might have.]]></summary></entry><entry><title type="html">Improving the dump analysis journey in Diagnose and Solve</title><link href="https://azure.github.io/AppService/2022/12/05/Making-diagnostics-analysis-easier-in-Diagnose-and-Solve.html" rel="alternate" type="text/html" title="Improving the dump analysis journey in Diagnose and Solve" /><published>2022-12-05T00:00:00+00:00</published><updated>2022-12-05T00:00:00+00:00</updated><id>https://azure.github.io/AppService/2022/12/05/Making-diagnostics-analysis-easier-in-Diagnose-and-Solve</id><content type="html" xml:base="https://azure.github.io/AppService/2022/12/05/Making-diagnostics-analysis-easier-in-Diagnose-and-Solve.html"><![CDATA[<p>We are happy to announce that our most recent improvements to <strong>Diagnose and Solve Problems</strong> allow you to begin the analysis on a collected memory dump immediately in the Azure portal!</p>

<p>For problems that do not manifest in logs or that you cannot investigate by debugging locally, you might attempt to capture a diagnostics artifact, like a memory dump, while the issue is active in your production environment. Diagnostics tools found under Diagnose and Solve Problems have enabled you to <a href="https://azure.github.io/AppService/2021/11/01/Diagnostic-Tools-for-ASP-NET-Core-Linux-apps-are-now-publicly-available.html">capture artifacts like memory dumps on demand or by using <strong>Custom Auto Heal</strong> for both Linux and Windows</a>.</p>

<p>However, capturing the right memory dump at the right time is only half the battle, you also have to have the right tools and experience to interpret the memory dump. Thankfully <strong>Diagnostics Analysis</strong> can be configured to run immediately following the capture of a memory dump. The analysis report will provide a summary of the most pertinent information in the memory dump, and will also highlight several important data points and even potential red flags that might require a code fix.</p>

<h2 id="analysis-report-the-dump-summary">Analysis Report: The dump summary</h2>

<p>The first step in the analysis is confirming the fundamentals. In the following image, you can see the summary presented by the analysis report, highlighting common helpful information like the process name, process architecture, or how long the process has been running. It also includes information on the platform version as well as the reason for the collection.</p>

<p><img src="/AppService/media/2022/12/diagnostics-analysis-dump-summary.png" alt="" /></p>

<p>In future versions of the report, we will also support opening the memory dump in Visual Studio with one click (will require the appropriate permissions to the Azure storage location).</p>

<h2 id="analysis-report-dump-analyzers">Analysis Report: Dump analyzers</h2>

<p>In addition to this initial summary you also have the results of the analyzers that were run against the dump, today these include:</p>

<ul>
  <li>Thread pool analysis</li>
  <li>Sync over async anti-pattern detection</li>
  <li>Deadlock detection</li>
  <li>Exception on the heap</li>
  <li>Managed heap summary</li>
  <li>Large + pinned objects on the heap</li>
  <li>SQL connections analysis</li>
  <li>Inbound HTTP request</li>
  <li>Outbound HTTP requests</li>
  <li>Socket connections</li>
  <li>Unique call stacks</li>
  <li>Symbol detection</li>
  <li>Source Link detection</li>
  <li>Synchronization objects that are blocking threads</li>
</ul>

<p><img src="/AppService/media/2022/12/diagnostics-analysis-findings.png" alt="" /></p>

<h2 id="analysis-report-advanced-call-stacks">Analysis Report: Advanced call stacks</h2>

<p>One of the most important diagnostics artifacts for production debugging is the call stack. During a typical dump debugging session, reviewing the list of threads and the associated call stacks is a great way to understand what was happening at the moment the dump was captured.</p>

<p>Given the importance of the call stack, the Diagnostics Analysis report provides an improved in-browser experience for call stack analysis. The advanced call stacks are explicitly designed to accurately reflect the call stack names and layout you have become accustomed to in Visual Studio.</p>

<p>You can initiate the advanced call stack view by clicking on any of the stack frame hyperlinks. It then also allows you to filter larger call stacks using method or namespace names, as well as quickly switch between viewing <strong>Just My Code</strong> and the entire framework call stack.</p>

<p><img src="/AppService/media/2022/12/diagnostics-analysis-advanced-call-stacks.gif" alt="" /></p>

<h2 id="getting-to-source-code-with-source-link">Getting to source code with Source Link</h2>

<p>For many scenarios, the call stack provides enough clues to the source of the problem, however, by taking advantage of <a href="https://learn.microsoft.com/visualstudio/debugger/how-to-improve-diagnostics-debugging-with-sourcelink">Source Link</a> your analysis can be even more precise.</p>

<p>What is Source Link? Source Link is a set of packages and a specification for describing source control metadata that can be embedded in symbols, binaries, and packages. Once Source Link is set up your analysis reports will produce active links that navigate directly to your source code. In the following example, an active link in the call stack is pointing directly at a specific file, line, and commit on GitHub.</p>

<p><img src="/AppService/media/2022/12/diagnostics-analysis-sourcelink-to-github.gif" alt="" /></p>

<p>While Source Link is on by default for .NET source, enabling this for your code today requires a couple of additional steps.</p>

<h2 id="setting-up-source-link">Setting up Source Link</h2>

<p>Debugging and diagnostics tools work best when symbols are available, typically the way to do that would be to ensure the PDBs are alongside the DLLs or, as I prefer, use embedded PDBs so they’re quite literally in the DLL already. You can <a href="https://learn.microsoft.com/visualstudio/debugger/how-to-improve-diagnostics-debugging-with-sourcelink">enable Source Link experiences in your own .NET project</a> by adding the following optional items to the property group:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;PropertyGroup&gt;</span>
    <span class="c">&lt;!-- Optional: Publish the repository URL in the built .nupkg (in the NuSpec &lt;Repository&gt; element) --&gt;</span>
    <span class="nt">&lt;PublishRepositoryUrl&gt;</span>true<span class="nt">&lt;/PublishRepositoryUrl&gt;</span>
 
    <span class="c">&lt;!-- Optional: Embed source files that are not tracked by the source control manager in the PDB --&gt;</span>
    <span class="nt">&lt;EmbedUntrackedSources&gt;</span>true<span class="nt">&lt;/EmbedUntrackedSources&gt;</span>
  
    <span class="c">&lt;!-- Optional: Build symbol package (.snupkg) to distribute the PDB containing Source Link --&gt;</span>
    <span class="nt">&lt;IncludeSymbols&gt;</span>true<span class="nt">&lt;/IncludeSymbols&gt;</span>
    <span class="nt">&lt;SymbolPackageFormat&gt;</span>snupkg<span class="nt">&lt;/SymbolPackageFormat&gt;</span>
<span class="nt">&lt;/PropertyGroup&gt;</span>
</code></pre></div></div>

<p>For source code hosted by GitHub or GitHub Enterprise you also need to include the following Nuget package:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ItemGroup&gt;</span>
   <span class="nt">&lt;PackageReference</span> <span class="na">Include=</span><span class="s">"Microsoft.SourceLink.GitHub"</span> <span class="na">Version=</span><span class="s">"1.1.1"</span> <span class="na">PrivateAssets=</span><span class="s">"All"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/ItemGroup&gt;</span>
</code></pre></div></div>

<p>There is also source code link support for <a href="https://learn.microsoft.com/visualstudio/debugger/how-to-improve-diagnostics-debugging-with-sourcelink#alternative-source-control-providers">Azure Repos, Azure DevOps, GitLab, Bitbucket, gitweb, and gitea</a>.</p>

<h2 id="summary">Summary</h2>

<p>Please check out the improved Diagnose and Solve Problem experiences for App Services for Windows and App Services for Linux! We are actively working on Diagnostics Analysis for traces and we are always interested in your feedback.</p>]]></content><author><name>Azure App Service</name></author><category term="diagnostics" /><summary type="html"><![CDATA[We are happy to announce that our most recent improvements to Diagnose and Solve Problems allow you to begin the analysis on a collected memory dump immediately in the Azure portal!]]></summary></entry><entry><title type="html">How to deploy a highly available multi-region web app</title><link href="https://azure.github.io/AppService/2022/12/02/multi-region-web-app.html" rel="alternate" type="text/html" title="How to deploy a highly available multi-region web app" /><published>2022-12-02T00:00:00+00:00</published><updated>2022-12-02T00:00:00+00:00</updated><id>https://azure.github.io/AppService/2022/12/02/multi-region-web-app</id><content type="html" xml:base="https://azure.github.io/AppService/2022/12/02/multi-region-web-app.html"><![CDATA[<p>High availability and fault tolerance are key components of a well-architected solution. It’s always best to prepare for the unexpected and having an emergency plan that can shorten downtime and keep your systems up an running automatically when something fails can help you do that.</p>

<p>When you deploy your application to the cloud, you choose a region in that cloud where your application infrastructure is based. Regions are essentially data centers is various parts of the world. In a world where unpredictable severe weather events, natural disasters, or human errors are inevitable, there’s the imminent possibility of events that may disturb the functionality of a region or take it down altogether for a period of time. If your application is deployed to a single region, and the region becomes unavailable, your application will also be unavailable. This may be unacceptable under the terms of your application’s SLA. If so, deploying your application and its services across multiple regions is a good idea. A multi-region deployment can use an active-active or active-passive configuration. An active-active configuration distributes requests across multiple active regions. An active-passive configuration keeps warm instances in the secondary region, but doesn’t send traffic there unless the primary region fails. For multi-region deployments, we recommend deploying to <a href="https://learn.microsoft.com/azure/availability-zones/cross-region-replication-azure#azure-cross-region-replication-pairings-for-all-geographies">paired regions</a>. For more information on this topic, see <a href="https://learn.microsoft.com/azure/architecture/reliability/architect">Architect Azure applications for resiliency and availability</a>.</p>

<p>In this blog post, we’ll walk through deploying a highly available multi-region web app. We’ll start with deploying the necessary infrastructure, and then move into managing the application source code. We’ll have a look at some of the different offerings Azure provides to enable this architecture as well as go over best practices and recommendations. We’ll keep the scenario simple by restricting our application components to just a web app, but the info shared here can definitely be expanded and applied to many other infrastructure patterns. For example, if your application connects to an Azure database offering or storage account, a quick search through the Azure docs will reveal built-in solutions as <a href="https://learn.microsoft.com/azure/azure-sql/database/active-geo-replication-overview">active geo-replication for SQL databases</a> and <a href="https://learn.microsoft.com/azure/storage/common/storage-redundancy">redundancy options for storage accounts</a>. For a reference architecture for a more detailed scenario, see <a href="https://learn.microsoft.com/azure/architecture/reference-architectures/app-service-web-app/multi-region">Highly available multi-region web application</a>.</p>

<h2 id="architecture">Architecture</h2>

<p><img src="/AppService/media/2022/11/multi-region-app-service.png" alt="" /></p>

<h3 id="workflow">Workflow</h3>

<p>The architecture is shown in the diagram above.</p>

<ul>
  <li><strong>Primary and secondary regions</strong>. This architecture uses two regions to achieve higher availability. The application is deployed to each region. During normal operations, network traffic is routed to the primary region. If the primary region becomes unavailable, traffic is routed to the secondary region.</li>
  <li><strong>Front Door</strong>. <a href="https://learn.microsoft.com/azure/frontdoor/">Front Door</a> routes incoming requests to the primary region. If the application running in that region becomes unavailable, Front Door fails over to the secondary region.</li>
</ul>

<p>There are several general approaches to achieve high availability across regions. This reference focuses on active/passive with hot standby. It replicates the infrastructure in the secondary region, however traffic only goes to the primary region. If something happens in the primary region, traffic will automatically divert to the secondary region.</p>

<h2 id="recommendations-and-considerations">Recommendations and considerations</h2>

<p>Your requirements might differ from the architecture described here, however you can use the recommendations and considerations in this section as a starting point as they apply to almost all multi-region scenarios. The considerations come from the <a href="https://learn.microsoft.com/azure/architecture/framework/">Microsoft Azure Well-Architected Framework</a>, which is a set of guiding tenets that can be used to improve the quality of a workload.</p>

<h3 id="regional-pairing">Regional pairing</h3>

<p>Deciding on your primary region is relatively straightforward - pick the region that supports the features you’re using and is closest to you/your customers to reduce latency. When deciding on your secondary region, consider using the <a href="https://learn.microsoft.com/azure/availability-zones/cross-region-replication-azure#azure-cross-region-replication-pairings-for-all-geographies">region Azure paired with your primary</a>.</p>

<h3 id="resource-groups">Resource groups</h3>

<p>Consider placing the primary region, secondary region, and Front Door into separate <a href="https://learn.microsoft.com/azure/azure-resource-manager/management/overview#resource-groups">resource groups</a>. This lets you manage the resources deployed to each region as a single collection.</p>

<h3 id="front-door-configuration">Front Door configuration</h3>

<ul>
  <li><strong>Routing</strong>. Front Door supports several <a href="https://learn.microsoft.com/azure/frontdoor/routing-methods#priority-based-traffic-routing">routing mechanisms</a>. We will be using <em>priority</em> routing in the scenario here as described in the workflow. Other routing mechanisms can direct traffic based on pre-defined weighting or lowest latency. Consider cost when choosing a routing mechanism because for example if you decide to use priority routing, you can scale down your application in your secondary region and only scale up when traffic is directed to it.</li>
  <li><strong>Tier</strong>. Azure Front Door is offered in a variety of flavors including the Standard and Premium tiers as well as Azure Front Door (classic). For a comparison of the various tiers, see the <a href="https://learn.microsoft.com/azure/frontdoor/standard-premium/tier-comparison">Front Door tier overview</a>. We will be using the <em>standard</em> tier in the scenario here.</li>
  <li><strong>Load balancing options</strong>. Azure provides multiple load balancing options to help direct traffic for your applications. Choosing the most appropriate one for your scenario can be based on a number of factors including traffic type, cost, features, and limitations. To help you decide, see the <a href="https://learn.microsoft.com/azure/architecture/guide/technology-choices/load-balancing-overview#decision-tree-for-load-balancing-in-azure">Decision tree for load balancing in Azure</a>. We will be using Azure Front Door for this scenario because we are deploying an internet facing web application (HTTP/HTTPS) deployed to multiple regions hosted on App Service.</li>
  <li><strong>Reliability</strong>. Azure Front Door automatically fails over if the primary region becomes unavailable. When Front Door fails over, there is a period of time (usually about 20-60 seconds) when clients cannot reach the application. The duration is affected by the frequency of health probes and sample size configuration. For more information on Front Door reliability, see <a href="https://learn.microsoft.com/azure/architecture/reference-architectures/app-service-web-app/multi-region#azure-front-door">Azure Front Door reliability</a>.</li>
</ul>

<h3 id="infrastructure-deployment">Infrastructure deployment</h3>

<p>Consider configuring a continuous deployment mechanism to manage your application source code as well as application infrastructure. Since you’re deploying resources in different regions, you’ll need to independently manage those resources. To ensure the resources are in sync and assuming you want essentially identical applications and infrastructures in each region, infrastructure as code (IaC) such as <a href="https://azure.microsoft.com/get-started/azure-portal/resource-manager/">Azure Resource Manager templates</a> or <a href="https://learn.microsoft.com/azure/developer/terraform/overview">Terraform</a> should be used with deployment pipelines such as <a href="https://learn.microsoft.com/azure/devops/pipelines/get-started/what-is-azure-pipelines?view=azure-devops">Azure DevOps pipelines</a> or <a href="https://docs.github.com/actions">GitHub Actions</a>. This way, if configured appropriately, any change to resources or source code would trigger updates across all regions you’re deployed to. See <a href="https://learn.microsoft.com/azure/app-service/deploy-continuous-deployment">Continuous deployment to Azure App Service</a> for recommendations on how to manage your source code. We’ll go over in detail how to do this for a multi-region deployment later on in this post.</p>

<h3 id="security">Security</h3>

<p>For this scenario, you’ll want to ensure <a href="https://learn.microsoft.com/azure/frontdoor/origin-security?tabs=app-service-functions&amp;pivots=front-door-standard-premium">the only principal that can access your applications is Front Door</a>. Front Door’s features work best when traffic only flows through Front Door. You should configure your origin to block traffic that hasn’t been sent through Front Door. Otherwise, traffic might bypass Front Door’s web application firewall, DDoS protection, and other security features. We’ll configure this as part of the tutorial later on in this post.</p>

<p>Additionally, for scenarios using App Services, consider <a href="https://learn.microsoft.com/azure/app-service/app-service-ip-restrictions#restrict-access-to-an-scm-site">locking down the SCM/advanced tools site</a> as this site will not likely need to be reached through Front Door. You’ll likely want to set up access restrictions that only allow you to conduct your testing as well as enable continuous deployment from your tool of choice. We’ll go into more detail on how to do this during the tutorial later on in this post.</p>

<p>Lastly, for scenarios using App Services, consider <a href="https://azure.github.io/AppService/2020/08/10/securing-data-plane-access.html">disabling basic auth on App Service</a>, which limits access to the FTP and SCM endpoints to users that are backed by Azure Active Directory (AAD). Disabling basic auth will require additional steps to configure continuous deployment. We’ll go through this as well later on in this post.</p>

<h3 id="cost-optimization">Cost optimization</h3>

<p>Choose the Azure Front Door tier that meets your data transfer, routing, and security requirements. See <a href="https://azure.microsoft.com/pricing/details/frontdoor/">Azure Front Door pricing</a> for more details.</p>

<p>Additionally, if you’re using an active/passive multi-region deployment, consider scaling down your App Services in the secondary region and configuring autoscale rules to handle the traffic when traffic is re-directed there. For more details, see the <a href="https://learn.microsoft.com/azure/app-service/manage-scale-up">App Service scaling docs</a>.</p>

<h2 id="infrastructure-deployment-tutorial">Infrastructure deployment tutorial</h2>

<p>In this tutorial, you’ll deploy the scenario shown in the <a href="#workflow">workflow</a> which includes two web apps behind Azure Front Door with access restrictions that only give Front Door direct access to the apps. We’ll use the Azure CLI to create the initial web apps and we’ll use the portal to create the Azure Front Door.</p>

<h3 id="prerequisites">Prerequisites</h3>

<p>An Azure account with an active subscription. <a href="https://azure.microsoft.com/free">Create an account for free</a>.</p>

<h3 id="create-two-instances-of-a-web-app">Create two instances of a web app</h3>

<p>You’ll need two instances of a web app that run in different Azure regions for this tutorial. We’ll use the region pair East US/West US as our two regions and create two quick empty web apps. Feel free to choose you’re own regions or use existing web apps if you already have some deployed.</p>

<p>I’m going to use a single resource group for all resources to make management and clean-up simpler, however consider using separate resource groups for each region/resource as this will further isolate your resources.</p>

<p>Run the following command to create your resource group. Replace the placeholder for “resource-group-name”.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az group create <span class="nt">--name</span> &lt;resource-group-name&gt; <span class="nt">--location</span> eastus
</code></pre></div></div>

<p>Run the following commands to create the App Service plans. Replace the placeholders for App Service plan name and resource group name.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az appservice plan create <span class="nt">--name</span> &lt;app-service-plan-east-us&gt; <span class="nt">--resource-group</span> &lt;resource-group-name&gt; <span class="nt">--is-linux</span> <span class="nt">--location</span> eastus
az appservice plan create <span class="nt">--name</span> &lt;app-service-plan-west-us&gt; <span class="nt">--resource-group</span> &lt;resource-group-name&gt; <span class="nt">--is-linux</span> <span class="nt">--location</span> westus
</code></pre></div></div>

<p>Once the App Service plans are created, run the following commands to create the web apps. Replace the placeholders and be sure to pay attention to the <code class="language-plaintext highlighter-rouge">--plan</code> parameter so that you place one app in each plan (and therefore each region).</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az webapp create <span class="nt">--name</span> &lt;web-app-east-us&gt; <span class="nt">--resource-group</span> &lt;resource-group-name&gt; <span class="nt">--plan</span> &lt;app-service-plan-east-us&gt;
az webapp create <span class="nt">--name</span> &lt;web-app-west-us&gt; <span class="nt">--resource-group</span> &lt;resource-group-name&gt; <span class="nt">--plan</span> &lt;app-service-plan-west-us&gt;
</code></pre></div></div>

<p>Make note of the default host name of each web app so you can define the backend addresses when you deploy the Front Door in the next step. It should be in the format <code class="language-plaintext highlighter-rouge">&lt;web-app-name&gt;.azurewebsites.net</code>. This can be found by running the following command or by navigating to the app’s <strong>Overview</strong> page in the <a href="https://portal.azure.com">Azure portal</a>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az webapp show <span class="nt">--name</span> &lt;web-app-name&gt; <span class="nt">--resource-group</span> &lt;resource-group-name&gt; <span class="nt">--query</span> <span class="s2">"hostNames"</span>
</code></pre></div></div>

<h3 id="disable-basic-auth-for-the-web-apps">Disable basic auth for the web apps</h3>

<p>To disable FTP access to the site, run the following CLI command. Replace the placeholders with your resource group and site name. Be sure to run this command for each of your apps.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az resource update <span class="nt">--resource-group</span> &lt;resource-group-name&gt; <span class="nt">--name</span> ftp <span class="nt">--namespace</span> Microsoft.Web <span class="nt">--resource-type</span> basicPublishingCredentialsPolicies <span class="nt">--parent</span> sites/&lt;web-app-east-us&gt; <span class="nt">--set</span> properties.allow<span class="o">=</span><span class="nb">false</span>
</code></pre></div></div>

<p>To disable basic auth access to the WebDeploy port and SCM site, run the following CLI command. Replace the placeholders with your resource group and site name.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az resource update <span class="nt">--resource-group</span> &lt;resource-group-name&gt; <span class="nt">--name</span> scm <span class="nt">--namespace</span> Microsoft.Web <span class="nt">--resource-type</span> basicPublishingCredentialsPolicies <span class="nt">--parent</span> sites/&lt;web-app-east-us&gt; <span class="nt">--set</span> properties.allow<span class="o">=</span><span class="nb">false</span>
</code></pre></div></div>

<p>For more information on disabling basic auth including how to test and monitor logins, see <a href="https://azure.github.io/AppService/2020/08/10/securing-data-plane-access.html">Disabling basic auth on App Service</a>.</p>

<h3 id="create-azure-front-door">Create Azure Front Door</h3>

<p>I’m going to use the portal to create the Front Door since it will help us visualize the various components, however the <a href="https://learn.microsoft.com/azure/frontdoor/create-front-door-cli">CLI or templates</a> can just as easily be used.</p>

<p>Front Door will be configured with priority routing where East US will be our primary region and West US will be the secondary. We’ll use the standard tier which gives us the option to use a Web Application Firewall (WAF) policy for enhanced security.</p>

<ol>
  <li>From the home page or the Azure menu in the portal, select <strong>+ Create a resource</strong>. Search for ”Front Door and CDN profiles”. Then select <strong>Create</strong>.</li>
  <li>
    <p>On the Compare offerings page, select <strong>Custom create</strong>. Then select <strong>Continue</strong> to create a Front Door.</p>

    <p><img src="/AppService/media/2022/11/afd-create-1.png" alt="" /></p>
  </li>
  <li>
    <p>On the ”Basics” tab, enter the following information:</p>

    <table>
      <thead>
        <tr>
          <th>Setting</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>Subscription</td>
          <td><em>select your subscription</em></td>
        </tr>
        <tr>
          <td>Resource group</td>
          <td><code class="language-plaintext highlighter-rouge">&lt;resource-group-name&gt;</code></td>
        </tr>
        <tr>
          <td>Name</td>
          <td><code class="language-plaintext highlighter-rouge">&lt;unique-name&gt;</code></td>
        </tr>
        <tr>
          <td>Tier</td>
          <td>Standard</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>In the “Endpoint” tab, select <strong>Add an endpoint</strong> and give your endpoint a globally unique name.</li>
  <li>Next, select <strong>+ Add a route</strong> to configure routing to your Web App origin.</li>
  <li>
    <p>On the <strong>Add a route</strong> page, enter the following information and select <strong>Add</strong> to add the route to the endpoint configuration.</p>

    <p><img src="/AppService/media/2022/11/afd-create-2.png" alt="" /></p>

    <table>
      <thead>
        <tr>
          <th>Setting</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>Name</td>
          <td>Enter a name to identify the mapping between domains and origin group.</td>
        </tr>
        <tr>
          <td>Domains</td>
          <td>A domain name has been auto-generated for you to use. If you want to add a custom domain, select <strong>Add a new domain</strong>. This example will use the default.</td>
        </tr>
        <tr>
          <td>Patterns to match</td>
          <td>Set all the URLs this route will accept. This example will use the default, and accept all URL paths.</td>
        </tr>
        <tr>
          <td>Accepted protocols</td>
          <td>Select the protocol the route will accept. This example will accept both HTTP and HTTPS requests.</td>
        </tr>
        <tr>
          <td>Redirect</td>
          <td>Enable this setting to redirect all HTTP traffic to the HTTPS endpoint.</td>
        </tr>
        <tr>
          <td>Origin group</td>
          <td>Select <strong>Add a new origin group</strong>. For the origin group name, enter <strong>myOriginGroup</strong>. Then select <strong>+ Add an origin</strong>. For the first origin (primary region), enter the name of one of the web apps you’re using for this tutorial for the <em>Name</em> and then for the <em>Origin Type</em> select <strong>App Services</strong>. For the <em>Host name</em>, select the hostname you queried/found in the portal earlier. Leave the rest of the default values the same. Select <strong>Add</strong> to add the origin to the origin group. Repeat the steps to add the second web app as an origin, however when adding the second origin, set the <em>Priority</em> to “2”. This will direct all traffic to the primary origin unless the primary goes down. Once both web app origins have been added, select <strong>Add</strong> to save the origin group configuration.</td>
        </tr>
        <tr>
          <td>Origin path</td>
          <td>Leave blank.</td>
        </tr>
        <tr>
          <td>Forwarding protocol</td>
          <td>Select the protocol that will be forwarded to the origin group. This example will match the incoming requests to origins.</td>
        </tr>
        <tr>
          <td>Caching</td>
          <td>Select the check box if you want to cache contents closer to your users globally using Azure Front Door’s edge POPs and the Microsoft network.</td>
        </tr>
        <tr>
          <td>Rules</td>
          <td>Once you’ve deployed the Azure Front Door profile, you can configure Rules to apply to your route.</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>Select <strong>+ Add a policy</strong> to apply a Web Application Firewall (WAF) policy to one or more domains in the Azure Front Door profile.</li>
  <li>On the <strong>Add security policy</strong> page, enter a name to identify this security policy. Then select domains you want to associate the policy with. For <em>WAF Policy</em>, you can select a previously created policy or select <strong>Create New</strong> to create a new policy. Select <strong>Save</strong> to add the security policy to the endpoint configuration.</li>
  <li>Select <strong>Review + Create</strong>, and then <strong>Create</strong> to deploy the Azure Front Door profile. It will take a few minutes for configurations to be propagated to all edge locations.</li>
</ol>

<h3 id="restrict-access-to-web-apps-to-the-azure-front-door-instance">Restrict access to web apps to the Azure Front Door instance</h3>

<p>Traffic from Azure Front Door to your application originates from a well known set of IP ranges defined in the AzureFrontDoor.Backend service tag. By using a service tag restriction rule, you can <a href="https://learn.microsoft.com/azure/frontdoor/origin-security">restrict traffic to only originate from Azure Front Door</a>.</p>

<p>Before setting up the App Service access restriction, take note of the <em>Front Door ID</em> which can be found on the <strong>Overview</strong> page for the Front Door instance in the <strong>Essentials</strong> section. This will be needed to ensure traffic only originates from your specific Front Door instance by further filtering the incoming requests based on the unique http header that your Azure Front Door sends.</p>

<p>For your first web app, navigate to the <strong>Access restriction (preview)</strong> page.</p>

<p><img src="/AppService/media/2022/11/web-app-access-restrictions-1.png" alt="" /></p>

<p>For the <em>Main site</em> add the following rule. Insert the Front Door ID which you copied earlier under <em>X-Azure-FDID</em>.</p>

<p><img src="/AppService/media/2022/11/web-app-access-restrictions-2.png" alt="" /></p>

<p>Be sure to repeat these same steps for the other web app.</p>

<h3 id="lock-down-scmadvanced-tool-site">Lock down SCM/advanced tool site</h3>

<p>Earlier on when you were creating the web apps, you disabled basic authentication to the WebDeploy port and SCM site. You’ll want to also disable all public access to the SCM site. Doing this, however, limits how code can be deployed to your app. Later on, we’ll walk through how to give a service principal access to deploy your source code. To disable public access, navigate to the <strong>Access restriction (preview)</strong> page for your app and select the <em>Advanced tool site</em> tab. For the <em>Unmatched rule action</em>, select “Deny” and then <strong>Save</strong>. Repeat this process for the other app.</p>

<p>You can optionally <a href="https://learn.microsoft.com/azure/app-service/app-service-ip-restrictions#restrict-access-to-an-scm-site">configure access restrictions to the SCM site</a> as well for the app if you need to give other principals access. To do so, navigate to the <em>Advanced tool site</em> tab and add any needed rules. The access restrictions you apply to the SCM site will depend on how you’re managing and deploying your source code and conducting your testing.</p>

<h3 id="verify-azure-front-door">Verify Azure Front Door</h3>

<p>To confirm access to your apps is restricted to Front Door, try navigating to your apps directly using their endpoints. If you are able to access them, review their access restrictions and ensure access is limited to only Front Door.</p>

<p>Now that a couple minutes have passed since the Front Door instance has been created, it should be ready and deployed globally. In a browser, enter the endpoint hostname for the Front Door. This endpoint can be found on the <strong>Overview</strong> page for your Front Door. If everything has been configured correctly, you should be reaching your app in your primary region.</p>

<p>You can test failover by stopping the app in your primary region and then navigating to your Front Door endpoint again. Note that there may be a delay between when the traffic will be directed to the second web app depending on your health probe frequency. You may need to refresh the page a couple times. Try stopping the second web app as well and you should see an error page. This proves it redirected to the secondary region.</p>

<h2 id="managing-source-code">Managing source code</h2>

<p>At this point, you’ve provisioned all of the resources you need to run a highly available multi-region web app. All that’s left is deploying the actual web app source code as well as understanding how to keep the app updated across the various regions over time as changes and updates are made. As mentioned in the <a href="#infrastructure-deployment">infrastructure deployment</a> section, just like for your infrastructure, it’s a good idea to use a CI/CD tool to manage your source code as well so any changes you make can automatically get deployed across all instances of your app. If you don’t configure continuous deployment, you’ll need to manually update each app in each region every time there is a code change.</p>

<p>App Service supports <a href="https://learn.microsoft.com/azure/app-service/deploy-continuous-deployment">continuous deployment from GitHub and Azure Repos</a>. For this tutorial, we’ll use GitHub and a repo that already <a href="https://learn.microsoft.com/azure/app-service/deploy-continuous-deployment?tabs=github#prepare-your-repository">meets the requirements for continuous deployment with App Service</a>. Feel free to use an app of your choosing, but be sure it meets the defined requirements.</p>

<p>We’re going to go over the following concepts in this next section including:</p>

<ul>
  <li>Configuring the deployment source for each app</li>
  <li>Keeping the apps updated over time across multiple regions</li>
  <li>Best practices for making source code updates by using deployment slots, slot swap, and updating Azure Front Door’s route/origin groups</li>
</ul>

<h3 id="prerequisites-for-source-code-deployment">Prerequisites for source code deployment</h3>

<p>We’ll be using a .NET 6.0 sample app from GitHub. If you don’t already have a GitHub account, <a href="https://github.com/">create an account for free</a>.</p>

<ol>
  <li>Go to the <a href="https://github.com/Azure-Samples/dotnetcore-docs-hello-world">.NET 6.0 sample app</a>.</li>
  <li>Select the <strong>Fork</strong> button in the upper right on the GitHub page.</li>
  <li>Select the <strong>Owner</strong> and leave the default Repository name.</li>
  <li>Select <strong>Create</strong> fork.</li>
</ol>

<p>At this point, your source code is all set up and ready to be deployed to your apps.</p>

<h3 id="configure-the-deployment-source">Configure the deployment source</h3>

<p>You’ll need to update your app’s stack settings to match the source code if you’ve been following along in this tutorial.</p>

<ol>
  <li>Go to one of your apps.</li>
  <li>In the left pane, select <strong>Configuration</strong> and then select the <strong>General settings</strong> tab.</li>
  <li>Under <strong>Stack settings</strong>, set the <em>Stack</em> to “.NET” and the <em>.NET version</em> to “.NET 6 (LTS)”.</li>
  <li>Select <strong>Save</strong> and then <strong>Continue</strong> to confirm the update.</li>
  <li>Repeat the above steps for your other app.</li>
</ol>

<p>As mentioned earlier, since you locked down the SCM site and disabled basic auth, the default method for deploying code with GitHub Actions isn’t going to work. This is because the default method uses a publishing profile. Instead, you have two options to authenticate with App Service for GitHub Actions - using a service principal or OpenID Connect. We have a detailed doc that goes through how to do this for each of your options - <a href="https://learn.microsoft.com/azure/app-service/deploy-github-actions?tabs=userlevel">Deploy to App Service using GitHub Actions</a>. We also have guidance for <a href="https://learn.microsoft.com/azure/app-service/deploy-azure-pipelines?tabs=yaml">Azure DevOps using Azure Pipelines</a>. Additionally, for more info on this topic as well as additional examples, we have a series of blog posts that walk through scenarios you may be interested in.</p>

<ul>
  <li><a href="https://azure.github.io/AppService/2021/01/04/deploying-to-network-secured-sites.html">Deploying to Network-secured sites</a></li>
  <li><a href="https://azure.github.io/AppService/2021/03/01/deploying-to-network-secured-sites-2.html">Deploying to Network-secured sites, Part 2</a></li>
</ul>

<p>For this blog post, we’ll walk through how to authenticate with App Service for GitHub Actions with the most secure option, which is OpenID Connect. You can choose to use a service principal which follows the same general process but omits a couple steps.</p>

<h3 id="configure-authentication-with-app-service-for-github-actions-with-openid-connect">Configure authentication with App Service for GitHub Actions with OpenID Connect</h3>

<ol>
  <li>
    <p>Run the following command to create the Active Directory application.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> az ad app create <span class="nt">--display-name</span> myApp
</code></pre></div>    </div>

    <p>This command will output JSON with an <code class="language-plaintext highlighter-rouge">appId</code>. Copy this, you’ll need it in the next step.</p>
  </li>
  <li>
    <p>Run the following command to create a service principal. Replace the <code class="language-plaintext highlighter-rouge">appId</code> placeholder with the value you copied in the previous step.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> az ad sp create <span class="nt">--id</span> &lt;appId&gt;
</code></pre></div>    </div>
  </li>
  <li>You’ll now need to create a new role assignment for your newly created service principal so that it has access to your resources. You’ll need to grant access at the subscription level and give it the “Contributor” role. You can scope the role assignment down further based on your use case. To create this role assignment, search for “Subscriptions” in the search box at the top of the portal and select your subscription.</li>
  <li>Select <strong>Access Control (IAM)</strong> in the left-hand menu.</li>
  <li>Select <strong>+ Add</strong> at the top and then <strong>Add role assignment</strong>.</li>
  <li>Select the <strong>Contributor</strong> role and then go to the <strong>Members</strong> tab.</li>
  <li>Select <strong>+ Select members</strong> and then find your service principal.</li>
  <li>Select <strong>Review + assign</strong>.</li>
  <li>Once the service principal has the needed role assignment, <a href="https://learn.microsoft.com/graph/api/application-post-federatedidentitycredentials?view=graph-rest-beta&amp;preserve-view=true&amp;tabs=http">create a new federated identity credential</a> for your active directory application. For detailed guidance, see <a href="https://learn.microsoft.com/azure/developer/github/connect-from-azure?tabs=azure-portal%2Clinux#add-federated-credentials">Add federated credentials</a>.
    <ol>
      <li>In the portal, search for in the search box and then go to <strong>App Registrations</strong> and then select the app you created earlier.</li>
      <li>Select <strong>Certificates &amp; secrets</strong> in the left-hand menu.</li>
      <li>In the <strong>Federated credentials</strong> tab, select <strong>Add credential</strong>.</li>
      <li>
        <p>Select the credential scenario <strong>GitHub Actions deploying Azure resources</strong>. Generate your credential by entering your credential details.</p>

        <table>
          <thead>
            <tr>
              <th>Field</th>
              <th>Description</th>
              <th>Example</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>Organization</td>
              <td>Your GitHub organization name or GitHub username.</td>
              <td>contoso</td>
            </tr>
            <tr>
              <td>Repository</td>
              <td>Your GitHub Repository name.</td>
              <td>dotnetcore-docs-hello-world</td>
            </tr>
            <tr>
              <td>Entity type</td>
              <td>The filter used to scope the OIDC requests from GitHub workflows. This field is used to generate the <strong>subject</strong> claim.</td>
              <td>Branch</td>
            </tr>
            <tr>
              <td>GitHub branch name</td>
              <td>The name of the environment, branch, or tag.</td>
              <td>master</td>
            </tr>
            <tr>
              <td>Name</td>
              <td>Identifier for the federated credential.</td>
              <td>myCredential</td>
            </tr>
          </tbody>
        </table>
      </li>
    </ol>
  </li>
  <li>You need to provide your application’s <strong>Client ID</strong>, <strong>Tenant ID</strong>, and <strong>Subscription ID</strong> to the login action as part of the GitHub Action workflow we will be working on. These values can either be provided directly in the workflow or can be stored in GitHub secrets and referenced in your workflow. Saving the values as GitHub secrets is the more secure option.
    <ol>
      <li>Open your GitHub repository and go to <strong>Settings</strong> &gt; <strong>Security</strong> &gt; <strong>Secrets and variables</strong> &gt; <strong>Actions</strong> &gt; <strong>New repository secret</strong>.</li>
      <li>
        <p>Create the following secrets. To find the values for <strong>Client ID</strong> and <strong>Tenant ID</strong>, go back to <strong>App Registrations</strong> in the portal and select the app you created earlier. The values will be under the <strong>Essentials</strong> on the <strong>Overview</strong> page.</p>

        <table>
          <thead>
            <tr>
              <th>Name</th>
              <th>Value</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>AZURE_CLIENT_ID</td>
              <td><code class="language-plaintext highlighter-rouge">&lt;application/client-id&gt;</code></td>
            </tr>
            <tr>
              <td>AZURE_TENANT_ID</td>
              <td><code class="language-plaintext highlighter-rouge">&lt;directory/tenant-id&gt;</code></td>
            </tr>
            <tr>
              <td>AZURE_SUBSCRIPTION_ID</td>
              <td><code class="language-plaintext highlighter-rouge">&lt;subscription-id&gt;</code></td>
            </tr>
          </tbody>
        </table>
      </li>
    </ol>
  </li>
</ol>

<h3 id="deploy-the-code">Deploy the code</h3>

<p>You’re now ready to deploy the code. However, configuring continuous deployment for production apps is not recommended because it makes testing and validation more complicated. Instead, use a combination of staging slots and slot swap to move code from your testing environment to production.</p>

<p>We’ll create deployment slots for each instance of our app and then walk through how to slot swap to get the code into production.</p>

<ol>
  <li>Go to one of your apps.</li>
  <li>In the left pane, select <strong>Deployment slots</strong>.</li>
  <li>Select <strong>+ Add Slot</strong>.</li>
  <li>Input “stage” for <em>Name</em> and to keep things simple, we’ll clone the settings from the production slot by selecting the app’s name from the <em>Clone settings from:</em> dropdown.</li>
  <li>Select <strong>Close</strong> at the bottom of the slot configuration pane.</li>
  <li>Select the newly created stage slot.</li>
  <li>
    <p>In the left pane, select <strong>Deployment Center</strong> and make sure you’re on the <strong>Settings</strong> tab.</p>

    <p><img src="/AppService/media/2022/11/deployment-source.png" alt="" /></p>
  </li>
  <li>For <strong>Source</strong>, select “GitHub”.</li>
  <li>If you’re deploying from GitHub for the first time, select <strong>Authorize</strong> and follow the authorization prompts.</li>
  <li>
    <p>After you authorize your Azure account with GitHub, select the Organization, Repository, and Branch to configure CI/CD as shown below. If you can’t find an organization or repository, you might need to enable more permissions on GitHub. For more information, see <a href="https://docs.github.com/organizations/managing-user-access-to-your-organizations-repositories">Managing access to your organization’s repositories</a>.</p>

    <table>
      <thead>
        <tr>
          <th>Setting</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>Organization</td>
          <td><code class="language-plaintext highlighter-rouge">&lt;your GitHub username&gt;</code></td>
        </tr>
        <tr>
          <td>Repository</td>
          <td>dotnetcore-docs-hello-world</td>
        </tr>
        <tr>
          <td>Branch</td>
          <td>master</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>Leave the remaining defaults and select <strong>Save</strong>. You can track the deployment and commits in the <strong>Logs</strong> tab in the <strong>Deployment Center</strong> to monitor progress.</li>
  <li>Repeat the above steps for your other app.</li>
</ol>

<h3 id="create-the-github-actions-workflow">Create the GitHub Actions workflow</h3>

<p>If you wait a couple minutes and review the deployment logs, you’ll see that the deployment to your apps failed. This is happening for two reasons - the default workflow created in the previous step when you were configuring continuous deployment with GitHub Actions uses a publishing profile to authenticate and you disabled this level of access, and the access restrictions for the SCM site for your staging slot deny all traffic. You first need to update the unmatched rule action for the Advanced tool site just for your staging slots to “Allow”. You’ve already disabled basic auth to your SCM site so access to it is already restricted to Azure AD authenticated principals. Allowing traffic using the access restrictions allows GitHub to reach your app and deploy your code. If you’re using GitHub Enterprise or another privately hosted source code repo, you can define specific access restrictions for your IP ranges instead. You then need to edit the GitHub Actions workflow as shown below so that it uses your OpenID Connect credentials instead of the publish profile. For sample workflows, see the OpenID Connect tab in <a href="https://learn.microsoft.com/azure/app-service/deploy-github-actions?tabs=openid#deploy-to-app-service">Deploy to App Service</a>. If you’ve been following along, use the below workflow.</p>

<ol>
  <li>Open your GitHub repository and go to the <code class="language-plaintext highlighter-rouge">dotnetcore-docs-hello-world/.github/workflows/</code> directory. You’ll see two autogenerated workflows, one for each app you created. Repeat the next step for each of them.</li>
  <li>
    <p>Select the “pencil” button in the top right to edit the file. Replace the contents with the below, which assumes you created the GitHub secrets earlier, update the placeholder for <code class="language-plaintext highlighter-rouge">AZURE_WEBAPP_NAME</code> for your apps, and then commit directly to the master branch. This commit will trigger the GitHub Action to run again and deploy your code, this time using OpenID Connect to authenticate.</p>

    <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="na">name</span><span class="pi">:</span> <span class="s">.NET Core</span>
    
 <span class="na">on</span><span class="pi">:</span> 
   <span class="na">push</span><span class="pi">:</span>
     <span class="na">branches</span><span class="pi">:</span>
       <span class="pi">-</span> <span class="s">master</span>
   <span class="na">workflow_dispatch</span><span class="pi">:</span>
    
 <span class="na">permissions</span><span class="pi">:</span>
   <span class="na">id-token</span><span class="pi">:</span> <span class="s">write</span>
   <span class="na">contents</span><span class="pi">:</span> <span class="s">read</span>
    
 <span class="na">env</span><span class="pi">:</span>
   <span class="na">AZURE_WEBAPP_NAME</span><span class="pi">:</span> <span class="s">&lt;web-app-name&gt;</span>    <span class="c1"># set this to your application's name</span>
   <span class="na">AZURE_WEBAPP_PACKAGE_PATH</span><span class="pi">:</span> <span class="s1">'</span><span class="s">.'</span>      <span class="c1"># set this to the path to your web app project, defaults to the repository root</span>
   <span class="na">DOTNET_VERSION</span><span class="pi">:</span> <span class="s1">'</span><span class="s">6.0.x'</span>           <span class="c1"># set this to the dot net version to use</span>
    
 <span class="na">jobs</span><span class="pi">:</span>
   <span class="na">build</span><span class="pi">:</span>
     <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    
     <span class="na">steps</span><span class="pi">:</span>
       <span class="c1"># Checkout the repo</span>
       <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@main</span>
       <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">azure/login@v1</span>
         <span class="na">with</span><span class="pi">:</span>
           <span class="na">client-id</span><span class="pi">:</span> <span class="s">${{ secrets.AZURE_CLIENT_ID }}</span>
           <span class="na">tenant-id</span><span class="pi">:</span> <span class="s">${{ secrets.AZURE_TENANT_ID }}</span>
           <span class="na">subscription-id</span><span class="pi">:</span> <span class="s">${{ secrets.AZURE_SUBSCRIPTION_ID }}</span>
    
       <span class="c1"># Setup .NET Core SDK</span>
       <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Setup .NET Core</span>
         <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-dotnet@v1</span>
         <span class="na">with</span><span class="pi">:</span>
           <span class="na">dotnet-version</span><span class="pi">:</span> <span class="s">${{ env.DOTNET_VERSION }}</span> 
          
       <span class="c1"># Run dotnet build and publish</span>
       <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">dotnet build and publish</span>
         <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
           <span class="s">dotnet restore</span>
           <span class="s">dotnet build --configuration Release</span>
           <span class="s">dotnet publish -c Release -o '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp' </span>
           <span class="no">   </span>
       <span class="c1"># Deploy to Azure Web apps</span>
       <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Run</span><span class="nv"> </span><span class="s">Azure</span><span class="nv"> </span><span class="s">webapp</span><span class="nv"> </span><span class="s">deploy</span><span class="nv"> </span><span class="s">action</span><span class="nv"> </span><span class="s">using</span><span class="nv"> </span><span class="s">publish</span><span class="nv"> </span><span class="s">profile</span><span class="nv"> </span><span class="s">credentials'</span>
             <span class="na">uses</span><span class="pi">:</span> <span class="s">azure/webapps-deploy@v2</span>
             <span class="na">with</span><span class="pi">:</span> 
               <span class="na">app-name</span><span class="pi">:</span> <span class="s">${{ env.AZURE_WEBAPP_NAME }}</span>
           <span class="na">slot-name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">stage'</span> <span class="c1"># replace with your slot name</span>
           <span class="na">package</span><span class="pi">:</span> <span class="s1">'</span><span class="s">${{</span><span class="nv"> </span><span class="s">env.AZURE_WEBAPP_PACKAGE_PATH</span><span class="nv"> </span><span class="s">}}/myapp'</span>
          
       <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">logout</span>
         <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
           <span class="s">az logout</span>
</code></pre></div>    </div>
  </li>
</ol>

<p>After a couple minutes, once the deployments to the staging slots complete, if you try accessing your slot’s endpoint directly, you’ll receive an “Error 403 - Forbidden” because the access restrictions were cloned from the production site. There are a couple strategies that can be used to review the staging site and then eventually get it into production. To quickly validate that your staging site is working, you can temporarily update its access restrictions by adding your IP to the allow list for example and then attempt to reach it’s endpoint again. Be sure to remove that rule once you are done validating. Alternatively, if you don’t plan on using slot traffic routing as described in the next section, you can update the access restrictions to meet your testing specifications.</p>

<p>Since your Front Door is still pointing to your production apps, if you go to your Front Door’s endpoint now, you’ll still see the initial empty apps that were created earlier. You have a couple options here - you can either slot swap and your new code will move into production all at once, or you can try a variation of A/B testing using slot traffic routing. We’ll go over both of these features.</p>

<h3 id="slot-traffic-routing">Slot traffic routing</h3>

<p>Traffic routing with slots allows you to direct a pre-defined portion of your user traffic to each slot. Initially, 100% of traffic is directed to the production site. However, you have the ability, for example, to send 10% of your traffic to your staging slot. So when users try to access your app, 10% of them will automatically be routed there. No changes are needed on your Front Door instance to accomplish this. To learn more about slot swaps and staging environments in App Service see <a href="https://learn.microsoft.com/azure/app-service/deploy-staging-slots">Set up staging environments in Azure App Service</a>.</p>

<p><img src="/AppService/media/2022/11/routetraffic.png" alt="" /></p>

<p>If you want to validate this feature as part of this tutorial, it will take some trial and error. The best way to validate it would be to send 100% of the traffic to the staging slot and then go the Front Door endpoint. You may need to clear your browser’s cache, refresh the page, or purge Front Door’s cache if you’re still not seeing your deployed changes.</p>

<p><img src="/AppService/media/2022/11/purge-cache.png" alt="" /></p>

<h3 id="slot-swap">Slot swap</h3>

<p>Once you’re done testing and validating, you can perform a <a href="https://learn.microsoft.com/azure/app-service/deploy-staging-slots#swap-two-slots">slot swap</a> from your staging site to your production site. You’ll need to do this for both instances of you app. During a slot swap, the App Service platform <a href="https://learn.microsoft.com/azure/app-service/deploy-staging-slots#swap-operation-steps">ensures the target slot doesn’t experience downtime</a>.</p>

<p>To perform the swap:</p>

<ol>
  <li>
    <p>Go to your app’s <strong>Deployment slots</strong> page and select <strong>Swap</strong>. The <strong>Swap</strong> dialog box shows settings in the selected source and target slots that will be changed.</p>

    <p><img src="/AppService/media/2022/11/swapbuttonbar.png" alt="" /></p>
  </li>
  <li>
    <p>Select the desired <strong>Source</strong> and <strong>Target</strong> slots. Also, select the <strong>Source Changes</strong> and <strong>Target Changes</strong> tabs and verify that the configuration changes are expected. When you’re finished, you can swap the slots immediately by selecting <strong>Swap</strong>.</p>

    <p><img src="/AppService/media/2022/11/swapimmediately.png" alt="" /></p>
  </li>
  <li>
    <p>Repeat the process for your other app.</p>
  </li>
</ol>

<p>After a few minutes, you can navigate to your Front Door’s endpoint to validate the slot swap succeeded. Ensure you reset the slot traffic routing if needed. You may need to clear your browser’s cache, refresh the page, or purge Front Door’s cache if you’re still not seeing your deployed changes.</p>

<p>At this point, your apps are up and running and any changes you make to your source code will automatically trigger an update to both of your staging apps. You can then repeat the slot swap process described above when you’re ready to move that code into production.</p>

<h3 id="additional-guidance">Additional guidance</h3>

<p>If you’re concerned about potential disruptions or issues with continuity across regions, as in some customers seeing one version of your app while others see another, or if you’re making significant changes to your apps, you can temporarily remove the site that’s undergoing the slot swap from your Front Door’s origin group and all traffic will be directed to the other origin. To do this, navigate to the <strong>Update origin group</strong> pane as shown below and <strong>Delete</strong> the origin that is undergoing the change. Once you’ve made all of your changes and are ready to serve traffic there again, you can return to the same pane and select <strong>+ Add an origin</strong> to re-add the origin.</p>

<p><img src="/AppService/media/2022/11/removeorigin.png" alt="" /></p>

<p>If you’d prefer to not delete and then add re-add origins, you can create additional origin groups for your Front Door instance. You can then associate the route to the origin group pointing to the intended origin. For example, you can create two new origin groups, one for your primary region and one for your secondary region. When your primary region is undergoing a change, associate the route with your secondary region and vice versa when your secondary region is undergoing a change. When all changes are complete, you can associate the route with your original origin group which contains both regions. This method works because a route can only be associated with one origin group at a time. However, if you have many regions and apps, it will get messy since you’ll need one origin group per region and potentially additional origin groups if you have multiple apps.</p>

<p>To demonstrate working with multiple origins, in the screenshot below, there are three origin groups. “MyOriginGroup” consists of both web apps, and the other two origin groups each consist of the web app in their respective region. In the example here, the app in the primary region is undergoing a change, so before I started that change, I associated the route with “MySecondaryRegion” so all traffic would be sent to the app in my secondary region during the change period. You can update the route by selecting “Unassociated” which will bring up the <strong>Associate routes</strong> pane.</p>

<p><img src="/AppService/media/2022/11/associateroutes.png" alt="" /></p>

<h2 id="clean-up-resources">Clean up resources</h2>

<p>After you’re done, you can remove all the items you created. Deleting a resource group also deletes its contents. If you don’t intend to use this Azure Front Door, you should remove these resources to avoid unnecessary charges.</p>

<h2 id="next-steps">Next steps</h2>

<p>If you’re interested in learning about another web app pattern for n-tier web applications, see the next post in this series called <a href="https://azure.github.io/AppService/2022/12/02/n-tier-web-app.html">How to deploy a secure n-tier web app</a>.</p>

<p>Zone redundancy is another infrastructure pattern that can provide high availability by replicating your services and data across availability zones to protect against single points of failure. For a detailed reference architecture on this for App Service, see <a href="https://learn.microsoft.com/azure/architecture/reference-architectures/app-service-web-app/zone-redundant">Highly available zone-redundant web application</a>.</p>

<h2 id="deploy-from-armbicep">Deploy from ARM/Bicep</h2>

<p>All of the resources in this post can be deployed using an ARM/Bicep template. A sample template is shown below, which creates empty apps and staging slots behind Front Door following the security best practices outlined in this post. You’ll need to configure the deployment source as well as the service principal once the template resources are created. To learn how to deploy ARM/Bicep templates, see <a href="https://learn.microsoft.com/azure/azure-resource-manager/bicep/deploy-cli">How to deploy resources with Bicep and Azure CLI</a>.</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">@</span><span class="s">description('The location into which regionally scoped resources should be deployed. Note that Front Door is a global resource.')</span>
<span class="s">param location string = 'canadacentral'</span>

<span class="err">@</span><span class="s">description('The location into which regionally scoped resources for the secondary should be deployed.')</span>
<span class="s">param secondaryLocation string = 'canadaeast'</span>

<span class="err">@</span><span class="s">description('The name of the App Service application to create. This must be globally unique.')</span>
<span class="s">param appName string = 'myapp-${uniqueString(resourceGroup().id)}'</span>

<span class="err">@</span><span class="s">description('The name of the secondary App Service application to create. This must be globally unique.')</span>
<span class="s">param secondaryAppName string = 'mysecondaryapp-${uniqueString(resourceGroup().id)}'</span>

<span class="err">@</span><span class="s">description('The name of the SKU to use when creating the App Service plan.')</span>
<span class="s">param appServicePlanSkuName string = 'S1'</span>

<span class="err">@</span><span class="s">description('The number of worker instances of your App Service plan that should be provisioned.')</span>
<span class="s">param appServicePlanCapacity int = </span><span class="m">1</span>

<span class="err">@</span><span class="s">description('The name of the Front Door endpoint to create. This must be globally unique.')</span>
<span class="s">param frontDoorEndpointName string = 'afd-${uniqueString(resourceGroup().id)}'</span>

<span class="err">@</span><span class="s">description('The name of the SKU to use when creating the Front Door profile.')</span>
<span class="err">@</span><span class="s">allowed([</span>
  <span class="s">'Standard_AzureFrontDoor'</span>
  <span class="s">'Premium_AzureFrontDoor'</span>
<span class="err">]</span><span class="s">)</span>
<span class="s">param frontDoorSkuName string = 'Standard_AzureFrontDoor'</span>

<span class="s">var appServicePlanName = 'AppServicePlan'</span>
<span class="s">var secondaryAppServicePlanName = 'SecondaryAppServicePlan'</span>

<span class="s">var frontDoorProfileName = 'MyFrontDoor'</span>
<span class="s">var frontDoorOriginGroupName = 'MyOriginGroup'</span>
<span class="s">var frontDoorOriginName = 'MyAppServiceOrigin'</span>
<span class="s">var secondaryFrontDoorOriginName = 'MySecondaryAppServiceOrigin'</span>
<span class="s">var frontDoorRouteName = 'MyRoute'</span>

<span class="s">resource frontDoorProfile 'Microsoft.Cdn/profiles@2021-06-01' = {</span>
  <span class="s">name</span><span class="err">:</span> <span class="s">frontDoorProfileName</span>
  <span class="s">location</span><span class="err">:</span> <span class="s1">'</span><span class="s">global'</span>
  <span class="na">sku</span><span class="pi">:</span> <span class="pi">{</span>
    <span class="nv">name</span><span class="pi">:</span> <span class="nv">frontDoorSkuName</span>
  <span class="pi">}</span>
<span class="err">}</span>

<span class="s">resource appServicePlan 'Microsoft.Web/serverFarms@2020-06-01' = {</span>
  <span class="s">name</span><span class="err">:</span> <span class="s">appServicePlanName</span>
  <span class="s">location</span><span class="err">:</span> <span class="s">location</span>
  <span class="s">sku</span><span class="err">:</span> <span class="pi">{</span>
    <span class="nv">name</span><span class="pi">:</span> <span class="nv">appServicePlanSkuName</span>
    <span class="nv">capacity</span><span class="pi">:</span> <span class="nv">appServicePlanCapacity</span>
  <span class="pi">}</span>
  <span class="na">properties</span><span class="pi">:</span> <span class="pi">{</span>
    <span class="nv">reserved</span><span class="pi">:</span> <span class="nv">true</span>
  <span class="pi">}</span>
  <span class="na">kind</span><span class="pi">:</span> <span class="s1">'</span><span class="s">app'</span>
<span class="err">}</span>

<span class="s">resource secondaryAppServicePlan 'Microsoft.Web/serverFarms@2020-06-01' = {</span>
  <span class="s">name</span><span class="err">:</span> <span class="s">secondaryAppServicePlanName</span>
  <span class="s">location</span><span class="err">:</span> <span class="s">secondaryLocation</span>
  <span class="s">sku</span><span class="err">:</span> <span class="pi">{</span>
    <span class="nv">name</span><span class="pi">:</span> <span class="nv">appServicePlanSkuName</span>
    <span class="nv">capacity</span><span class="pi">:</span> <span class="nv">appServicePlanCapacity</span>
  <span class="pi">}</span>
  <span class="na">properties</span><span class="pi">:</span> <span class="pi">{</span>
    <span class="nv">reserved</span><span class="pi">:</span> <span class="nv">true</span>
  <span class="pi">}</span>
  <span class="na">kind</span><span class="pi">:</span> <span class="s1">'</span><span class="s">app'</span>
<span class="err">}</span>

<span class="s">resource app 'Microsoft.Web/sites@2020-06-01' = {</span>
  <span class="s">name</span><span class="err">:</span> <span class="s">appName</span>
  <span class="s">location</span><span class="err">:</span> <span class="s">location</span>
  <span class="s">kind</span><span class="err">:</span> <span class="s1">'</span><span class="s">app'</span>
  <span class="na">identity</span><span class="pi">:</span> <span class="pi">{</span>
    <span class="nv">type</span><span class="pi">:</span> <span class="s1">'</span><span class="s">SystemAssigned'</span>
  <span class="pi">}</span>
  <span class="na">properties</span><span class="pi">:</span> <span class="pi">{</span>
    <span class="nv">serverFarmId</span><span class="pi">:</span> <span class="nv">appServicePlan.id</span>
    <span class="nv">httpsOnly</span><span class="pi">:</span> <span class="nv">true</span>
    <span class="nv">siteConfig</span><span class="pi">:</span> <span class="pi">{</span>
      <span class="nv">detailedErrorLoggingEnabled</span><span class="pi">:</span> <span class="nv">true</span>
      <span class="nv">httpLoggingEnabled</span><span class="pi">:</span> <span class="nv">true</span>
      <span class="nv">requestTracingEnabled</span><span class="pi">:</span> <span class="nv">true</span>
      <span class="nv">ftpsState</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Disabled'</span>
      <span class="nv">minTlsVersion</span><span class="pi">:</span> <span class="s1">'</span><span class="s">1.2'</span>
      <span class="nv">ipSecurityRestrictions</span><span class="pi">:</span> <span class="pi">[</span>
        <span class="pi">{</span>
          <span class="nv">tag</span><span class="pi">:</span> <span class="s1">'</span><span class="s">ServiceTag'</span>
          <span class="nv">ipAddress</span><span class="pi">:</span> <span class="s1">'</span><span class="s">AzureFrontDoor.Backend'</span>
          <span class="nv">action</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Allow'</span>
          <span class="nv">priority</span><span class="pi">:</span> <span class="nv">100</span>
          <span class="nv">headers</span><span class="pi">:</span> <span class="pi">{</span>
            <span class="s1">'</span><span class="s">x-azure-fdid'</span><span class="pi">:</span> <span class="pi">[</span>
              <span class="nv">frontDoorProfile.properties.frontDoorId</span>
            <span class="pi">]</span>
          <span class="pi">}</span>
          <span class="nv">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Allow</span><span class="nv"> </span><span class="s">traffic</span><span class="nv"> </span><span class="s">from</span><span class="nv"> </span><span class="s">Front</span><span class="nv"> </span><span class="s">Door'</span>
        <span class="pi">}</span>
      <span class="pi">]</span>
      <span class="nv">scmIpSecurityRestrictionsDefaultAction</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Deny'</span>
    <span class="pi">}</span>
  <span class="pi">}</span>
<span class="err">}</span>

<span class="s">resource ftpPolicy 'Microsoft.Web/sites/basicPublishingCredentialsPolicies@2022-03-01' = {</span>
  <span class="s">name</span><span class="err">:</span> <span class="s1">'</span><span class="s">ftp'</span>
  <span class="na">kind</span><span class="pi">:</span> <span class="s1">'</span><span class="s">string'</span>
  <span class="na">parent</span><span class="pi">:</span> <span class="s">app</span>
  <span class="na">location</span><span class="pi">:</span> <span class="s">location</span>
  <span class="na">properties</span><span class="pi">:</span> <span class="pi">{</span>
    <span class="nv">allow</span><span class="pi">:</span> <span class="nv">false</span>
  <span class="pi">}</span>
<span class="err">}</span>

<span class="s">resource scmPolicy 'Microsoft.Web/sites/basicPublishingCredentialsPolicies@2022-03-01' = {</span>
  <span class="s">name</span><span class="err">:</span> <span class="s1">'</span><span class="s">scm'</span>
  <span class="na">kind</span><span class="pi">:</span> <span class="s1">'</span><span class="s">string'</span>
  <span class="na">parent</span><span class="pi">:</span> <span class="s">app</span>
  <span class="na">location</span><span class="pi">:</span> <span class="s">location</span>
  <span class="na">properties</span><span class="pi">:</span> <span class="pi">{</span>
    <span class="nv">allow</span><span class="pi">:</span> <span class="nv">false</span>
  <span class="pi">}</span>
<span class="err">}</span>

<span class="s">resource appSlot 'Microsoft.Web/sites/slots@2020-06-01' = {</span>
  <span class="s">name</span><span class="err">:</span> <span class="s1">'</span><span class="s">${appName}/stage'</span>
  <span class="na">location</span><span class="pi">:</span> <span class="s">location</span>
  <span class="na">kind</span><span class="pi">:</span> <span class="s1">'</span><span class="s">app'</span>
  <span class="na">identity</span><span class="pi">:</span> <span class="pi">{</span>
    <span class="nv">type</span><span class="pi">:</span> <span class="s1">'</span><span class="s">SystemAssigned'</span>
  <span class="pi">}</span>
  <span class="na">properties</span><span class="pi">:</span> <span class="pi">{</span>
    <span class="nv">serverFarmId</span><span class="pi">:</span> <span class="nv">appServicePlan.id</span>
    <span class="nv">httpsOnly</span><span class="pi">:</span> <span class="nv">true</span>
    <span class="nv">siteConfig</span><span class="pi">:</span> <span class="pi">{</span>
      <span class="nv">detailedErrorLoggingEnabled</span><span class="pi">:</span> <span class="nv">true</span>
      <span class="nv">httpLoggingEnabled</span><span class="pi">:</span> <span class="nv">true</span>
      <span class="nv">requestTracingEnabled</span><span class="pi">:</span> <span class="nv">true</span>
      <span class="nv">ftpsState</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Disabled'</span>
      <span class="nv">minTlsVersion</span><span class="pi">:</span> <span class="s1">'</span><span class="s">1.2'</span>
      <span class="nv">ipSecurityRestrictions</span><span class="pi">:</span> <span class="pi">[</span>
        <span class="pi">{</span>
          <span class="nv">tag</span><span class="pi">:</span> <span class="s1">'</span><span class="s">ServiceTag'</span>
          <span class="nv">ipAddress</span><span class="pi">:</span> <span class="s1">'</span><span class="s">AzureFrontDoor.Backend'</span>
          <span class="nv">action</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Allow'</span>
          <span class="nv">priority</span><span class="pi">:</span> <span class="nv">100</span>
          <span class="nv">headers</span><span class="pi">:</span> <span class="pi">{</span>
            <span class="s1">'</span><span class="s">x-azure-fdid'</span><span class="pi">:</span> <span class="pi">[</span>
              <span class="nv">frontDoorProfile.properties.frontDoorId</span>
            <span class="pi">]</span>
          <span class="pi">}</span>
          <span class="nv">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Allow</span><span class="nv"> </span><span class="s">traffic</span><span class="nv"> </span><span class="s">from</span><span class="nv"> </span><span class="s">Front</span><span class="nv"> </span><span class="s">Door'</span>
        <span class="pi">}</span>
      <span class="pi">]</span>
    <span class="pi">}</span>
  <span class="pi">}</span>
  <span class="na">dependsOn</span><span class="pi">:</span> <span class="pi">[</span>
    <span class="nv">app</span>
  <span class="pi">]</span>
<span class="err">}</span>

<span class="s">resource ftpPolicySlot 'Microsoft.Web/sites/slots/basicPublishingCredentialsPolicies@2022-03-01' = {</span>
  <span class="s">name</span><span class="err">:</span> <span class="s1">'</span><span class="s">ftp'</span>
  <span class="na">kind</span><span class="pi">:</span> <span class="s1">'</span><span class="s">string'</span>
  <span class="na">parent</span><span class="pi">:</span> <span class="s">appSlot</span>
  <span class="na">location</span><span class="pi">:</span> <span class="s">location</span>
  <span class="na">properties</span><span class="pi">:</span> <span class="pi">{</span>
    <span class="nv">allow</span><span class="pi">:</span> <span class="nv">false</span>
  <span class="pi">}</span>
<span class="err">}</span>

<span class="s">resource scmPolicySlot 'Microsoft.Web/sites/slots/basicPublishingCredentialsPolicies@2022-03-01' = {</span>
  <span class="s">name</span><span class="err">:</span> <span class="s1">'</span><span class="s">scm'</span>
  <span class="na">kind</span><span class="pi">:</span> <span class="s1">'</span><span class="s">string'</span>
  <span class="na">parent</span><span class="pi">:</span> <span class="s">appSlot</span>
  <span class="na">location</span><span class="pi">:</span> <span class="s">location</span>
  <span class="na">properties</span><span class="pi">:</span> <span class="pi">{</span>
    <span class="nv">allow</span><span class="pi">:</span> <span class="nv">false</span>
  <span class="pi">}</span>
<span class="err">}</span>

<span class="s">resource secondaryApp 'Microsoft.Web/sites@2020-06-01' = {</span>
  <span class="s">name</span><span class="err">:</span> <span class="s">secondaryAppName</span>
  <span class="s">location</span><span class="err">:</span> <span class="s">secondaryLocation</span>
  <span class="s">kind</span><span class="err">:</span> <span class="s1">'</span><span class="s">app'</span>
  <span class="na">identity</span><span class="pi">:</span> <span class="pi">{</span>
    <span class="nv">type</span><span class="pi">:</span> <span class="s1">'</span><span class="s">SystemAssigned'</span>
  <span class="pi">}</span>
  <span class="na">properties</span><span class="pi">:</span> <span class="pi">{</span>
    <span class="nv">serverFarmId</span><span class="pi">:</span> <span class="nv">secondaryAppServicePlan.id</span>
    <span class="nv">httpsOnly</span><span class="pi">:</span> <span class="nv">true</span>
    <span class="nv">siteConfig</span><span class="pi">:</span> <span class="pi">{</span>
      <span class="nv">detailedErrorLoggingEnabled</span><span class="pi">:</span> <span class="nv">true</span>
      <span class="nv">httpLoggingEnabled</span><span class="pi">:</span> <span class="nv">true</span>
      <span class="nv">requestTracingEnabled</span><span class="pi">:</span> <span class="nv">true</span>
      <span class="nv">ftpsState</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Disabled'</span>
      <span class="nv">minTlsVersion</span><span class="pi">:</span> <span class="s1">'</span><span class="s">1.2'</span>
      <span class="nv">ipSecurityRestrictions</span><span class="pi">:</span> <span class="pi">[</span>
        <span class="pi">{</span>
          <span class="nv">tag</span><span class="pi">:</span> <span class="s1">'</span><span class="s">ServiceTag'</span>
          <span class="nv">ipAddress</span><span class="pi">:</span> <span class="s1">'</span><span class="s">AzureFrontDoor.Backend'</span>
          <span class="nv">action</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Allow'</span>
          <span class="nv">priority</span><span class="pi">:</span> <span class="nv">100</span>
          <span class="nv">headers</span><span class="pi">:</span> <span class="pi">{</span>
            <span class="s1">'</span><span class="s">x-azure-fdid'</span><span class="pi">:</span> <span class="pi">[</span>
              <span class="nv">frontDoorProfile.properties.frontDoorId</span>
            <span class="pi">]</span>
          <span class="pi">}</span>
          <span class="nv">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Allow</span><span class="nv"> </span><span class="s">traffic</span><span class="nv"> </span><span class="s">from</span><span class="nv"> </span><span class="s">Front</span><span class="nv"> </span><span class="s">Door'</span>
        <span class="pi">}</span>
      <span class="pi">]</span>
      <span class="nv">scmIpSecurityRestrictionsDefaultAction</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Deny'</span>
    <span class="pi">}</span>
  <span class="pi">}</span>
<span class="err">}</span>

<span class="s">resource secondaryFtpPolicy 'Microsoft.Web/sites/basicPublishingCredentialsPolicies@2022-03-01' = {</span>
  <span class="s">name</span><span class="err">:</span> <span class="s1">'</span><span class="s">ftp'</span>
  <span class="na">kind</span><span class="pi">:</span> <span class="s1">'</span><span class="s">string'</span>
  <span class="na">parent</span><span class="pi">:</span> <span class="s">secondaryApp</span>
  <span class="na">location</span><span class="pi">:</span> <span class="s">secondaryLocation</span>
  <span class="na">properties</span><span class="pi">:</span> <span class="pi">{</span>
    <span class="nv">allow</span><span class="pi">:</span> <span class="nv">false</span>
  <span class="pi">}</span>
<span class="err">}</span>

<span class="s">resource secondaryScmPolicy 'Microsoft.Web/sites/basicPublishingCredentialsPolicies@2022-03-01' = {</span>
  <span class="s">name</span><span class="err">:</span> <span class="s1">'</span><span class="s">scm'</span>
  <span class="na">kind</span><span class="pi">:</span> <span class="s1">'</span><span class="s">string'</span>
  <span class="na">parent</span><span class="pi">:</span> <span class="s">secondaryApp</span>
  <span class="na">location</span><span class="pi">:</span> <span class="s">secondaryLocation</span>
  <span class="na">properties</span><span class="pi">:</span> <span class="pi">{</span>
    <span class="nv">allow</span><span class="pi">:</span> <span class="nv">false</span>
  <span class="pi">}</span>
<span class="err">}</span>

<span class="s">resource secondaryAppSlot 'Microsoft.Web/sites/slots@2020-06-01' = {</span>
  <span class="s">name</span><span class="err">:</span> <span class="s1">'</span><span class="s">${secondaryAppName}/stage'</span>
  <span class="na">location</span><span class="pi">:</span> <span class="s">secondaryLocation</span>
  <span class="na">kind</span><span class="pi">:</span> <span class="s1">'</span><span class="s">app'</span>
  <span class="na">identity</span><span class="pi">:</span> <span class="pi">{</span>
    <span class="nv">type</span><span class="pi">:</span> <span class="s1">'</span><span class="s">SystemAssigned'</span>
  <span class="pi">}</span>
  <span class="na">properties</span><span class="pi">:</span> <span class="pi">{</span>
    <span class="nv">serverFarmId</span><span class="pi">:</span> <span class="nv">secondaryAppServicePlan.id</span>
    <span class="nv">httpsOnly</span><span class="pi">:</span> <span class="nv">true</span>
    <span class="nv">siteConfig</span><span class="pi">:</span> <span class="pi">{</span>
      <span class="nv">detailedErrorLoggingEnabled</span><span class="pi">:</span> <span class="nv">true</span>
      <span class="nv">httpLoggingEnabled</span><span class="pi">:</span> <span class="nv">true</span>
      <span class="nv">requestTracingEnabled</span><span class="pi">:</span> <span class="nv">true</span>
      <span class="nv">ftpsState</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Disabled'</span>
      <span class="nv">minTlsVersion</span><span class="pi">:</span> <span class="s1">'</span><span class="s">1.2'</span>
      <span class="nv">ipSecurityRestrictions</span><span class="pi">:</span> <span class="pi">[</span>
        <span class="pi">{</span>
          <span class="nv">tag</span><span class="pi">:</span> <span class="s1">'</span><span class="s">ServiceTag'</span>
          <span class="nv">ipAddress</span><span class="pi">:</span> <span class="s1">'</span><span class="s">AzureFrontDoor.Backend'</span>
          <span class="nv">action</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Allow'</span>
          <span class="nv">priority</span><span class="pi">:</span> <span class="nv">100</span>
          <span class="nv">headers</span><span class="pi">:</span> <span class="pi">{</span>
            <span class="s1">'</span><span class="s">x-azure-fdid'</span><span class="pi">:</span> <span class="pi">[</span>
              <span class="nv">frontDoorProfile.properties.frontDoorId</span>
            <span class="pi">]</span>
          <span class="pi">}</span>
          <span class="nv">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Allow</span><span class="nv"> </span><span class="s">traffic</span><span class="nv"> </span><span class="s">from</span><span class="nv"> </span><span class="s">Front</span><span class="nv"> </span><span class="s">Door'</span>
        <span class="pi">}</span>
      <span class="pi">]</span>
    <span class="pi">}</span>
  <span class="pi">}</span>
  <span class="na">dependsOn</span><span class="pi">:</span> <span class="pi">[</span>
    <span class="nv">secondaryApp</span>
  <span class="pi">]</span>
<span class="err">}</span>

<span class="s">resource secondaryFtpPolicySlot 'Microsoft.Web/sites/slots/basicPublishingCredentialsPolicies@2022-03-01' = {</span>
  <span class="s">name</span><span class="err">:</span> <span class="s1">'</span><span class="s">ftp'</span>
  <span class="na">kind</span><span class="pi">:</span> <span class="s1">'</span><span class="s">string'</span>
  <span class="na">parent</span><span class="pi">:</span> <span class="s">secondaryAppSlot</span>
  <span class="na">location</span><span class="pi">:</span> <span class="s">secondaryLocation</span>
  <span class="na">properties</span><span class="pi">:</span> <span class="pi">{</span>
    <span class="nv">allow</span><span class="pi">:</span> <span class="nv">false</span>
  <span class="pi">}</span>
<span class="err">}</span>

<span class="s">resource secondaryScmPolicySlot 'Microsoft.Web/sites/slots/basicPublishingCredentialsPolicies@2022-03-01' = {</span>
  <span class="s">name</span><span class="err">:</span> <span class="s1">'</span><span class="s">scm'</span>
  <span class="na">kind</span><span class="pi">:</span> <span class="s1">'</span><span class="s">string'</span>
  <span class="na">parent</span><span class="pi">:</span> <span class="s">secondaryAppSlot</span>
  <span class="na">location</span><span class="pi">:</span> <span class="s">secondaryLocation</span>
  <span class="na">properties</span><span class="pi">:</span> <span class="pi">{</span>
    <span class="nv">allow</span><span class="pi">:</span> <span class="nv">false</span>
  <span class="pi">}</span>
<span class="err">}</span>

<span class="s">resource frontDoorEndpoint 'Microsoft.Cdn/profiles/afdEndpoints@2021-06-01' = {</span>
  <span class="s">name</span><span class="err">:</span> <span class="s">frontDoorEndpointName</span>
  <span class="s">parent</span><span class="err">:</span> <span class="s">frontDoorProfile</span>
  <span class="s">location</span><span class="err">:</span> <span class="s1">'</span><span class="s">global'</span>
  <span class="na">properties</span><span class="pi">:</span> <span class="pi">{</span>
    <span class="nv">enabledState</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Enabled'</span>
  <span class="pi">}</span>
<span class="err">}</span>

<span class="s">resource frontDoorOriginGroup 'Microsoft.Cdn/profiles/originGroups@2021-06-01' = {</span>
  <span class="s">name</span><span class="err">:</span> <span class="s">frontDoorOriginGroupName</span>
  <span class="s">parent</span><span class="err">:</span> <span class="s">frontDoorProfile</span>
  <span class="s">properties</span><span class="err">:</span> <span class="pi">{</span>
    <span class="nv">loadBalancingSettings</span><span class="pi">:</span> <span class="pi">{</span>
      <span class="nv">sampleSize</span><span class="pi">:</span> <span class="nv">4</span>
      <span class="nv">successfulSamplesRequired</span><span class="pi">:</span> <span class="nv">3</span>
    <span class="pi">}</span>
    <span class="nv">healthProbeSettings</span><span class="pi">:</span> <span class="pi">{</span>
      <span class="nv">probePath</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/'</span>
      <span class="nv">probeRequestType</span><span class="pi">:</span> <span class="s1">'</span><span class="s">HEAD'</span>
      <span class="nv">probeProtocol</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Http'</span>
      <span class="nv">probeIntervalInSeconds</span><span class="pi">:</span> <span class="nv">100</span>
    <span class="pi">}</span>
  <span class="pi">}</span>
<span class="err">}</span>

<span class="s">resource frontDoorOrigin 'Microsoft.Cdn/profiles/originGroups/origins@2021-06-01' = {</span>
  <span class="s">name</span><span class="err">:</span> <span class="s">frontDoorOriginName</span>
  <span class="s">parent</span><span class="err">:</span> <span class="s">frontDoorOriginGroup</span>
  <span class="s">properties</span><span class="err">:</span> <span class="pi">{</span>
    <span class="nv">hostName</span><span class="pi">:</span> <span class="nv">app.properties.defaultHostName</span>
    <span class="nv">httpPort</span><span class="pi">:</span> <span class="nv">80</span>
    <span class="nv">httpsPort</span><span class="pi">:</span> <span class="nv">443</span>
    <span class="nv">originHostHeader</span><span class="pi">:</span> <span class="nv">app.properties.defaultHostName</span>
    <span class="nv">priority</span><span class="pi">:</span> <span class="nv">1</span>
    <span class="nv">weight</span><span class="pi">:</span> <span class="nv">1000</span>
  <span class="pi">}</span>
<span class="err">}</span>

<span class="s">resource secondaryFrontDoorOrigin 'Microsoft.Cdn/profiles/originGroups/origins@2021-06-01' = {</span>
  <span class="s">name</span><span class="err">:</span> <span class="s">secondaryFrontDoorOriginName</span>
  <span class="s">parent</span><span class="err">:</span> <span class="s">frontDoorOriginGroup</span>
  <span class="s">properties</span><span class="err">:</span> <span class="pi">{</span>
    <span class="nv">hostName</span><span class="pi">:</span> <span class="nv">secondaryApp.properties.defaultHostName</span>
    <span class="nv">httpPort</span><span class="pi">:</span> <span class="nv">80</span>
    <span class="nv">httpsPort</span><span class="pi">:</span> <span class="nv">443</span>
    <span class="nv">originHostHeader</span><span class="pi">:</span> <span class="nv">app.properties.defaultHostName</span>
    <span class="nv">priority</span><span class="pi">:</span> <span class="nv">2</span>
    <span class="nv">weight</span><span class="pi">:</span> <span class="nv">1000</span>
  <span class="pi">}</span>
<span class="err">}</span>

<span class="s">resource frontDoorRoute 'Microsoft.Cdn/profiles/afdEndpoints/routes@2021-06-01' = {</span>
  <span class="s">name</span><span class="err">:</span> <span class="s">frontDoorRouteName</span>
  <span class="s">parent</span><span class="err">:</span> <span class="s">frontDoorEndpoint</span>
  <span class="s">dependsOn</span><span class="err">:</span> <span class="pi">[</span>
    <span class="nv">frontDoorOrigin // This explicit dependency is required to ensure that the origin group is not empty when the route is created.</span>
  <span class="pi">]</span>
  <span class="na">properties</span><span class="pi">:</span> <span class="pi">{</span>
    <span class="nv">originGroup</span><span class="pi">:</span> <span class="pi">{</span>
      <span class="nv">id</span><span class="pi">:</span> <span class="nv">frontDoorOriginGroup.id</span>
    <span class="pi">}</span>
    <span class="nv">supportedProtocols</span><span class="pi">:</span> <span class="pi">[</span>
      <span class="s1">'</span><span class="s">Http'</span>
      <span class="s1">'</span><span class="s">Https'</span>
    <span class="pi">]</span>
    <span class="nv">patternsToMatch</span><span class="pi">:</span> <span class="pi">[</span>
      <span class="s1">'</span><span class="s">/*'</span>
    <span class="pi">]</span>
    <span class="nv">forwardingProtocol</span><span class="pi">:</span> <span class="s1">'</span><span class="s">HttpsOnly'</span>
    <span class="nv">linkToDefaultDomain</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Enabled'</span>
    <span class="nv">httpsRedirect</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Enabled'</span>
  <span class="pi">}</span>
<span class="err">}</span>

<span class="s">output appServiceHostName string = app.properties.defaultHostName</span>
<span class="s">output secondaryAppServiceHostName string = secondaryApp.properties.defaultHostName</span>
<span class="s">output appServiceSlotHostName string = appSlot.properties.defaultHostName</span>
<span class="s">output secondaryAppServiceSlotHostName string = secondaryAppSlot.properties.defaultHostName</span>
<span class="s">output frontDoorEndpointHostName string = frontDoorEndpoint.properties.hostName</span>
</code></pre></div></div>]]></content><author><name>Azure App Service</name></author><category term="networking" /><summary type="html"><![CDATA[High availability and fault tolerance are key components of a well-architected solution. It’s always best to prepare for the unexpected and having an emergency plan that can shorten downtime and keep your systems up an running automatically when something fails can help you do that.]]></summary></entry><entry><title type="html">How to deploy a secure n-tier web app</title><link href="https://azure.github.io/AppService/2022/12/02/n-tier-web-app.html" rel="alternate" type="text/html" title="How to deploy a secure n-tier web app" /><published>2022-12-02T00:00:00+00:00</published><updated>2022-12-02T00:00:00+00:00</updated><id>https://azure.github.io/AppService/2022/12/02/n-tier-web-app</id><content type="html" xml:base="https://azure.github.io/AppService/2022/12/02/n-tier-web-app.html"><![CDATA[<p>Many applications will consist of more than just a single component. For example, you may have a frontend which is publicly accessible that connects to a backend database, storage account, key vault, another VM, or a combination of these, which make up what’s known as an n-tier application. It’s important that applications like this are architected so that access is limited to privileged individuals and any component that is not intended for public consumptions is locked down to the greatest extent available for your use case.</p>

<p>In this blog post, we’ll walk through setting up a web app with a secure, network-isolated communication to a backend web app. All traffic will be isolated within your virtual network using virtual network integration and private endpoints. This configuration can be used for a number of use cases and it’s architecture can be extended or modified, for example in <a href="https://azure.github.io/AppService/2021/04/22/Site-with-secure-backend-communication.html">this blog post</a> where a web app securely connects to a backend cognitive service that detects the language of input text. For more information on n-tier applications including additional scenarios and multi-region considerations, see <a href="https://learn.microsoft.com/azure/architecture/reference-architectures/n-tier/multi-region-sql-server">Multi-region N-tier application</a>. Also, see the <a href="https://github.com/Azure/reliable-web-app-pattern-dotnet">Reliable Web App Pattern</a> for additional context and details on deploying more complex scenarios.</p>

<p>This scenario is intentionally kept simple to focus on the key concepts of the architecture and configuration since they are reusable and can easily be replicated across many application patterns. We’ll also be diving into secure source code deployment best practices which is a key part of web app management.</p>

<p>This post is organized into the following steps:</p>

<ol>
  <li>Create network infrastructure</li>
  <li>Create backend web app</li>
  <li>Create frontend web app</li>
  <li>Deploy application source code</li>
</ol>

<h2 id="architecture">Architecture</h2>

<p><img src="/AppService/media/2022/11/n-tier-app-service.png" alt="" /></p>

<h3 id="workflow">Workflow</h3>

<p>The architecture is shown in the diagram above.</p>

<ul>
  <li><strong>Frontend web app</strong>. This architecture uses two web apps - a frontend that is accessible over the public internet, and a private backend web app. The frontend web app is integrated into the virtual network in the subnet with the feature regional VNet integration and it is configured to consume a DNS private zone.</li>
  <li><strong>Backend web app</strong>. The backend web app is only exposed through a private endpoint via another subnet in the virtual network. Direct communication to the backend web app is explicitly blocked. The only resource or principal that is allowed to connect to the backend is the frontend web app using the private endpoint.</li>
</ul>

<p><em>Note that virtual network integration and private endpoints are now available all the way down to the Basic SKU. App Services using the Free tier don’t support this at this time.</em></p>

<h2 id="getting-started">Getting started</h2>

<p>This is the second article in a series focusing on App Service patterns. If you missed the first one on secure multi-region deployments, you can <a href="https://azure.github.io/AppService/2022/12/02/multi-region-web-app.html">find it here</a>.</p>

<p>This guide will use the Azure CLI to set up the environment and deploy the web apps. Additional configurations will be done using the Azure portal as it is easier to demonstrate what is going on there. Keep in mind that everything that is being done in this blog post can be done using the Azure CLI, Azure PowerShell, Azure portal, and Azure Resource Manager (ARM) templates. A complete ARM template that deploys the core resources in this post is given at the end of this post.</p>

<p>An Azure account with an active subscription is required. <a href="https://azure.microsoft.com/free">Create an account for free</a>.</p>

<h2 id="create-network-infrastructure">Create network infrastructure</h2>

<p>First, set up a Resource Group with a Virtual Network. The virtual network should have at least two subnets: one for the virtual network integration and one for the private endpoint. The address-prefix size must be at least /28 for both subnets; small subnets can affect scaling limits and the number of private endpoints. Go with /24 for both subnets if you are not under constraints. Be sure to replace the placeholders for resource group name and virtual network name.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az group create <span class="nt">--name</span> &lt;resource-group-name&gt; <span class="nt">--location</span> eastus
az network vnet create <span class="nt">--resource-group</span> &lt;resource-group-name&gt; <span class="nt">--location</span> eastus <span class="nt">--name</span> &lt;vnet-name&gt; <span class="nt">--address-prefixes</span> 10.0.0.0/16
</code></pre></div></div>

<p>For the subnets, there are two settings that you need to pay attention to. This is often set by the portal or scripts, but here it is called out directly. A <a href="https://docs.microsoft.com/azure/virtual-network/subnet-delegation-overview">delegation</a> of “Microsoft.Web/serverfarms” informs the subnet that it’s reserved for virtual network integration.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az network vnet subnet create <span class="nt">--resource-group</span> &lt;resource-group-name&gt; <span class="nt">--vnet-name</span> &lt;vnet-name&gt; <span class="nt">--name</span> vnet-integration-subnet <span class="nt">--address-prefixes</span> 10.0.0.0/24 <span class="nt">--delegations</span> Microsoft.Web/serverfarms
az network vnet subnet create <span class="nt">--resource-group</span> &lt;resource-group-name&gt; <span class="nt">--vnet-name</span> &lt;vnet-name&gt; <span class="nt">--name</span> private-endpoint-subnet <span class="nt">--address-prefixes</span> 10.0.1.0/24
</code></pre></div></div>

<p>The last part of the network infrastructure is the Private DNS Zone. Private DNS Zones are used to host the DNS records for private endpoints allowing clients to find the backend services by name. We’ll be creating the private endpoint using the portal, so the Private DNS Zone will be created automatically for us. Go <a href="https://docs.microsoft.com/azure/private-link/private-endpoint-overview">here for a primer on Azure Private Endpoints</a> and <a href="https://docs.microsoft.com/azure/private-link/private-endpoint-dns">go here for how DNS Zones are used with private endpoints</a>.</p>

<h2 id="create-two-instances-of-a-web-app">Create two instances of a web app</h2>

<p>You’ll need two instances of a web app for this tutorial. You’ll need to use at least the Basic SKU in order to be able to use virtual network integration and private endpoints. You’ll take care of the vnet integration and additional configurations later on - first you’ll get the apps deployed. You’ll first deploy a single App Service plan. You’ll then deploy two web apps in that App Service plan.</p>

<p>Run the following command to create the App Service plan. Replace the placeholders for App Service plan name and resource group name.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az appservice plan create <span class="nt">--name</span> &lt;app-service-plan-name&gt; <span class="nt">--resource-group</span> &lt;resource-group-name&gt; <span class="nt">--is-linux</span> <span class="nt">--location</span> eastus <span class="nt">--sku</span> P1V2
</code></pre></div></div>

<p>Once the App Service plan is created, run the following commands to create the web apps. Replace the placeholders with your globally distinct web app names and your App Service plan name. If you’re following along in this tutorial, you’ll be deploying a Node.js app later on, so we’ll set the runtime now. Feel free to change this value based on the app you want to deploy. Run <code class="language-plaintext highlighter-rouge">az webapp list-runtimes</code> for a list of the possible runtimes you can choose from.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az webapp create <span class="nt">--name</span> &lt;frontend-web-app-name&gt; <span class="nt">--resource-group</span> &lt;resource-group-name&gt; <span class="nt">--plan</span> &lt;app-service-plan-name&gt; <span class="nt">--runtime</span> <span class="s2">"NODE:18-lts"</span>
az webapp create <span class="nt">--name</span> &lt;backend-web-app-name&gt; <span class="nt">--resource-group</span> &lt;resource-group-name&gt; <span class="nt">--plan</span> &lt;app-service-plan-name&gt; <span class="nt">--runtime</span> <span class="s2">"NODE:18-lts"</span>
</code></pre></div></div>

<h2 id="disable-basic-auth-for-the-web-apps">Disable basic auth for the web apps</h2>

<p>Consider <a href="https://azure.github.io/AppService/2020/08/10/securing-data-plane-access.html">disabling basic auth on App Service</a>, which limits access to the FTP and SCM endpoints to users that are backed by Azure Active Directory (AAD). Disabling basic auth will require additional steps to configure continuous deployment. We’ll go through this as well later on in this post.</p>

<p>To disable FTP access to the site, run the following CLI command. Replace the placeholders with your resource group and site name. Be sure to run this command for each of your apps.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az resource update <span class="nt">--resource-group</span> &lt;resource-group-name&gt; <span class="nt">--name</span> ftp <span class="nt">--namespace</span> Microsoft.Web <span class="nt">--resource-type</span> basicPublishingCredentialsPolicies <span class="nt">--parent</span> sites/&lt;web-app-name&gt; <span class="nt">--set</span> properties.allow<span class="o">=</span><span class="nb">false</span>
</code></pre></div></div>

<p>To disable basic auth access to the WebDeploy port and SCM site, run the following CLI command. Replace the placeholders with your resource group and site name.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az resource update <span class="nt">--resource-group</span> &lt;resource-group-name&gt; <span class="nt">--name</span> scm <span class="nt">--namespace</span> Microsoft.Web <span class="nt">--resource-type</span> basicPublishingCredentialsPolicies <span class="nt">--parent</span> sites/&lt;web-app-name&gt; <span class="nt">--set</span> properties.allow<span class="o">=</span><span class="nb">false</span>
</code></pre></div></div>

<p>For more information on disabling basic auth including how to test and monitor logins, see <a href="https://azure.github.io/AppService/2020/08/10/securing-data-plane-access.html">Disabling basic auth on App Service</a>.</p>

<h2 id="configure-virtual-network-integration-for-the-frontend-web-app">Configure virtual network integration for the frontend web app</h2>

<p>The <a href="https://learn.microsoft.com/azure/app-service/overview-vnet-integration">virtual network integration feature</a> allows outbound traffic to flow directly into the virtual network. We’ll use the portal to configure this as well as the private endpoint in the next step.</p>

<ol>
  <li>In the Azure portal, go to your frontend web app and then go to the <strong>Networking</strong> page.</li>
  <li>
    <p>Select <strong>VNet Integration</strong>.</p>

    <p><img src="/AppService/media/2022/11/vnet-integration-1.png" alt="" /></p>
  </li>
  <li>Select <strong>+ Add VNet</strong>.</li>
  <li>Select the virtual network you created earlier.</li>
  <li>For <strong>Subnet</strong>, select “Select Existing” and then select the “vnet-integration-subnet”.</li>
  <li>Select <strong>OK</strong> to save your configuration.</li>
</ol>

<p>You can now browse to the web app and all <strong>outbound</strong> traffic from the frontend web app will be routed through the virtual network.</p>

<h2 id="create-the-private-endpoint-for-the-backend-web-app">Create the private endpoint for the backend web app</h2>

<p>The last part of the core infrastructure setup is to create the <a href="https://learn.microsoft.com/azure/app-service/networking/private-endpoint">private endpoint</a> to allow secure communication between your frontend and your backend. Adding a private endpoint by default disables all public access to your app. By enabling a private endpoint on your backend web app, all inbound traffic will therefore use the private endpoint to reach it. The only resources that are allowed to use the private endpoint to connect to your backend web app are the ones in your virtual network.</p>

<ol>
  <li>In the Azure portal, go to your backend web app and then go to the <strong>Networking</strong> page. Under <strong>Inbound address</strong>, you’ll see the public IP that was automatically delegated to your web app. Note that when you add the private endpoint, this will change to a private IP from your Azure virtual network address space.</li>
  <li>
    <p>Select <strong>Private endpoints</strong>.</p>

    <p><img src="/AppService/media/2022/11/private-endpoint-1.png" alt="" /></p>
  </li>
  <li>Select <strong>+ Add</strong>.</li>
  <li>Give your private endpoint a name, select the virtual network you created earlier, and select the “private-endpoint-subnet”.</li>
  <li>Make sure <strong>Integrate with private DNS zone</strong> is set to “Yes”. If you want to set up your own Private DNS Zone, you can find details for that <a href="https://learn.microsoft.com/azure/app-service/networking/private-endpoint#dns">here</a>.</li>
  <li>Select <strong>OK</strong> to save your configuration.</li>
</ol>

<p>Creating the private endpoint from the portal is the simplest method as it does a number of actions in the background for you including linking the zone to your virtual network. If you create the Private DNS Zone manually, you will need to create the link manually.</p>

<p>If you go back to the <strong>Networking</strong> page for your backend web app, you’ll see that the inbound address has changed to a private IP address from your virtual network. You’ll also see that access restrictions have turned on. If you view the <strong>Access restriction (preview)</strong>, you see public access has been disabled. Disabling public network access blocks all incoming traffic except the traffic that comes from private endpoints.</p>

<p><img src="/AppService/media/2022/11/private-endpoint-2.png" alt="" /></p>

<p><img src="/AppService/media/2022/11/access-restriction-1.png" alt="" /></p>

<h2 id="lock-down-scmadvanced-tool-site">Lock down SCM/advanced tool site</h2>

<p>Earlier on when you were creating the web apps, you disabled basic authentication to the WebDeploy port and SCM site. You’ll want to also disable all public access to the SCM site. This has already been done for the backend web app when you added the private endpoint. You will only need to do this for the frontend web app. Doing this, however, limits how code can be deployed to your app. Later on, we’ll walk through how to give a service principal access to deploy your source code. To disable public access, navigate to the <strong>Access restriction (preview)</strong> page for your frontend web app and select the <em>Advanced tool site</em> tab. For the <em>Unmatched rule action</em>, select “Deny”, then <strong>Save</strong>, and <strong>Continue</strong>. You can’t deny all public access using the checkbox at the top because that will deny public access to your frontend’s main site as well. Doing this would prevent your users from being able to access your frontend which is not what we want.</p>

<p><img src="/AppService/media/2022/11/access-restriction-scm.png" alt="" /></p>

<h2 id="checkpoint">Checkpoint</h2>

<p>At this point, all of the baseline infrastructure has been deployed and you are ready to deploy your source code. We’ll walk through how to do that securely in the next part of the blog post, but first, let’s validate our connections and app access.</p>

<p>Starting with the backend, try navigating directly to your backend’s endpoint. This can be found on the <strong>Overview</strong> page for the backend web app and should be in the format <em><a href="https://backend-web-app-name.azurewebsites.net">https://backend-web-app-name.azurewebsites.net</a></em>. If you’ve configured things correctly, public access should be blocked and you should get an error page.</p>

<p><img src="/AppService/media/2022/11/backend-forbidden.png" alt="" /></p>

<p>You should see a similar error page when trying to navigate to the backend’s SCM site. The endpoint for that is in the format <em><a href="https://backend-web-app-name.scm.azurewebsites.net">https://backend-web-app-name.scm.azurewebsites.net</a></em>.</p>

<p>To validate the frontend, we’ll need to ensure it is publicly accessible and that it can reach the backend only using the private endpoint.</p>

<p>Try navigating to your frontend’s endpoint. You should see content similar to what is shown below. This means your frontend is publicly accessible and ready for your source code as intended. Try navigating to your frontend’s SCM site as well and confirm that access is denied.</p>

<p><img src="/AppService/media/2022/11/frontend-available.png" alt="" /></p>

<p>To validate the connection between the frontend and the backend, you’ll need access to the SCM site. For this, the simplest method if you’ve been following along is you can add a temporary rule to your frontend’s access restrictions that allows access from your IP. See the below screenshot for an example. For source, use your IP address.</p>

<p><img src="/AppService/media/2022/11/scm-ip-access.png" alt="" /></p>

<p>Navigate to the SCM site for your frontend by going to <em><a href="https://frontend-web-app-name.scm.azurewebsites.net/">https://frontend-web-app-name.scm.azurewebsites.net/</a></em>. If you can’t access it, make sure you’ve added the rule for your IP as shown above. Select <strong>SSH</strong> from the menu bar at the top. Doing this creates an SSH session on your frontend’s instances. Once that loads, you’re going to do an “nslookup” on your backend to confirm that it can be reached from the frontend using the private endpoint. Type “nslookup backend-web-app-name.azurewebsites.net”. Under the “Non-authoritative answer”, it should resolve the private IP address you noted earlier. You can also do a “curl” on your backend’s endpoint to display the backend’s current site contents. For now, curl will display the HTML for the empty web app.</p>

<p><img src="/AppService/media/2022/11/frontend-ssh.png" alt="" /></p>

<p>Repeat the same nslookup and curl commands from another terminal (one that is not an SSH session from your frontend’s instances). The nslookup will return the public IP for the backend web app. Since we blocked public access to the backend web app, if you try to reach the public IP, you will get an access denied error which means this site will not be accessible from the public internet, which is what we want. The nslookup doesn’t resolve the private IP because that can only be reached from within the virtual network using the private endpoint and only the frontend web app is within the virtual network. If you try to do a curl on the backend from an external terminal, you’ll see the HTML returns “Web App - Unavailable”, which is the HTML for the error page you saw earlier when you tried navigating to the backend in your browser.</p>

<p><img src="/AppService/media/2022/11/frontend-ssh-ext.png" alt="" /></p>

<p>Now that you’ve validated your connections, you’re all set to deploy some code. Make sure you remove the rule that allows access to your frontend’s SCM site if you no longer need it.</p>

<h2 id="source-code-management">Source code management</h2>

<p>A number of best practices were described in the previous <a href="https://azure.github.io/AppService/2022/12/02/multi-region-web-app.html">blog post</a>, which went over how to manage source code across multiple regions. Those same concepts can be applied here. For completeness, we’ll go over the important parts to get your n-tier app up and running.</p>

<h3 id="prerequisites-for-source-code-deployment">Prerequisites for source code deployment</h3>

<p>We’ll be using a two Node.js apps hosted on GitHub. If you don’t already have a GitHub account, <a href="https://github.com/">create an account for free</a>.</p>

<ol>
  <li>Go to the <a href="https://github.com/seligj95/nodejs-backend">Node.js backend sample app</a>. This is a simple Hello World app.</li>
  <li>Select the <strong>Fork</strong> button in the upper right on the GitHub page.</li>
  <li>Select the <strong>Owner</strong> and leave the default Repository name.</li>
  <li>Select <strong>Create</strong> fork.</li>
  <li>Repeat the same process for the <a href="https://github.com/seligj95/nodejs-frontend">Node.js frontend sample app</a>. This is a basic web scraping app that I built specifically for this blog post.</li>
</ol>

<p>At this point, your source code is all set up and ready to be deployed to your apps.</p>

<h3 id="create-staging-slots-and-configure-continuous-deployment">Create staging slots and configure continuous deployment</h3>

<p>Configuring continuous deployment for production apps is not recommended because it makes testing and validation more complicated. Instead, use a combination of staging slots and slot swap to move code from your testing/staging environment to production.</p>

<p>We’ll create deployment slots for each of our apps and then walk through how to slot swap to get the code into production.</p>

<ol>
  <li>Go to one of your apps.</li>
  <li>In the left pane, select <strong>Deployment slots</strong>.</li>
  <li>Select <strong>+ Add Slot</strong>.</li>
  <li>Input “stage” for <em>Name</em> and to keep things simple, we’ll clone the settings from the production slot by selecting the app’s name from the <em>Clone settings from:</em> dropdown.</li>
  <li>Select <strong>Close</strong> at the bottom of the slot configuration pane.</li>
  <li>Select the newly created stage slot.</li>
</ol>

<p>Cloning settings to a slot doesn’t clone every possible setting. In this case, depending on how you’ll be using the slots, you’ll need to disable basic auth for both app slots, create another private endpoint for the backend slot, and implement virtual network integration for the frontend slot. The process for this is the same as before. Pay attention to the access restrictions on the SCM sites if you do recreate the private endpoint as that will disable public access to it and prevent GitHub from reaching your staging slots. You’ll need to allow public access to the Advanced tools site as was done in the previous <a href="https://azure.github.io/AppService/2022/12/02/multi-region-web-app.html#create-the-gitHub-actions-workflow">blog post</a>.</p>

<p>To disable basic auth for the slots, make sure you update the <code class="language-plaintext highlighter-rouge">--parent</code> parameter as shown in the below example. Repeat the same command for “ftp” and for your other app as you did previously.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az resource update <span class="nt">--resource-group</span> &lt;resource-group-name&gt; <span class="nt">--name</span> scm <span class="nt">--namespace</span> Microsoft.Web <span class="nt">--resource-type</span> basicPublishingCredentialsPolicies <span class="nt">--parent</span> sites/&lt;web-app-name&gt;/slots/&lt;slot-name&gt; <span class="nt">--set</span> properties.allow<span class="o">=</span><span class="nb">false</span>
</code></pre></div></div>

<p>Now that the staging slots are properly configured and locked down, you can configure continuous deployment.</p>

<ol>
  <li>
    <p>In the left pane, select <strong>Deployment Center</strong> and make sure you’re on the <strong>Settings</strong> tab.</p>

    <p><img src="/AppService/media/2022/11/deployment-source.png" alt="" /></p>
  </li>
  <li>For <strong>Source</strong>, select “GitHub”.</li>
  <li>If you’re deploying from GitHub for the first time, select <strong>Authorize</strong> and follow the authorization prompts.</li>
  <li>
    <p>After you authorize your Azure account with GitHub, select the Organization, Repository, and Branch to configure CI/CD as shown below. If you can’t find an organization or repository, you might need to enable more permissions on GitHub. For more information, see <a href="https://docs.github.com/organizations/managing-user-access-to-your-organizations-repositories">Managing access to your organization’s repositories</a>.</p>

    <table>
      <thead>
        <tr>
          <th>Setting</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>Organization</td>
          <td><code class="language-plaintext highlighter-rouge">&lt;your GitHub username&gt;</code></td>
        </tr>
        <tr>
          <td>Repository</td>
          <td>nodejs-backend</td>
        </tr>
        <tr>
          <td>Branch</td>
          <td>main</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>Leave the remaining defaults and select <strong>Save</strong>. You can track the deployment and commits in the <strong>Logs</strong> tab in the <strong>Deployment Center</strong> to monitor progress.</li>
  <li>Repeat the above steps for your other app.</li>
</ol>

<p>Since you locked down the SCM sites and disabled basic auth for your apps, the default method for deploying code with GitHub Actions isn’t going to work. You’ll see that the deployment failed if you review the logs. This is because the default method uses a publishing profile. Instead, you have two options to authenticate with App Service for GitHub Actions - using a service principal or OpenID Connect. We have a detailed doc that goes through how to do this for each of your options - <a href="https://learn.microsoft.com/azure/app-service/deploy-github-actions?tabs=userlevel">Deploy to App Service using GitHub Actions</a>. We also have guidance for <a href="https://learn.microsoft.com/azure/app-service/deploy-azure-pipelines?tabs=yaml">Azure DevOps using Azure Pipelines</a>. Additionally, for more info on this topic as well as additional examples, we have a series of blog posts that walk through scenarios you may be interested in.</p>

<ul>
  <li><a href="https://azure.github.io/AppService/2021/01/04/deploying-to-network-secured-sites.html">Deploying to Network-secured sites</a></li>
  <li><a href="https://azure.github.io/AppService/2021/03/01/deploying-to-network-secured-sites-2.html">Deploying to Network-secured sites, Part 2</a></li>
</ul>

<p>For this blog post, we’ll walk through how to authenticate with App Service for GitHub Actions using a service principal.</p>

<h3 id="configure-authentication-with-app-service-for-github-actions-with-a-service-principal">Configure authentication with App Service for GitHub Actions with a service principal</h3>

<ol>
  <li>
    <p>Run the following command to create the <a href="https://learn.microsoft.com/azure/active-directory/develop/app-objects-and-service-principals#service-principal-object">service principal</a>. Replace the placeholders with your subscription ID, resource group name, and frontend and backend app names. The output is a JSON object with the role assignment credentials that provide access to your App Service apps. Copy this JSON object for the next step. It will include your client secret which will only be visible at this time. It is always a good practice to grant minimum access. The scope in this example is limited to the specific frontend and backend web apps and not the entire resource group.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> az ad sp create-for-rbac <span class="nt">--name</span> <span class="s2">"myApp"</span> <span class="nt">--role</span> contributor <span class="nt">--scopes</span> /subscriptions/&lt;subscription-id&gt;/resourceGroups/&lt;group-name&gt;/providers/Microsoft.Web/sites/&lt;frontend-web-app-name&gt; /subscriptions/&lt;subscription-id&gt;/resourceGroups/&lt;group-name&gt;/providers/Microsoft.Web/sites/&lt;backend-web-app-name&gt; <span class="nt">--sdk-auth</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>You need to provide your service principal’s credentials to the login action as part of the GitHub Action workflow you will be using. These values can either be provided directly in the workflow or can be stored in a GitHub secret and referenced in your workflow. Saving the values as GitHub secrets is the more secure option.</p>
    <ol>
      <li>Open one of your GitHub repositories and go to <strong>Settings</strong> &gt; <strong>Security</strong> &gt; <strong>Secrets and variables</strong> &gt; <strong>Actions</strong> &gt; <strong>New repository secret</strong>.</li>
      <li>Paste the entire JSON output from the Azure CLI command from the initial step into the secret’s value field. Give the secret the name <code class="language-plaintext highlighter-rouge">AZURE_CREDENTIALS</code>. When you configure the workflow file later, you use the secret for the input <code class="language-plaintext highlighter-rouge">creds</code> of the Azure Login action.</li>
      <li>
        <p>Create the following secrets.</p>

        <table>
          <thead>
            <tr>
              <th>Name</th>
              <th>Value</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>AZURE_APP_ID</td>
              <td><code class="language-plaintext highlighter-rouge">&lt;application/client-id&gt;</code></td>
            </tr>
            <tr>
              <td>AZURE_PASSWORD</td>
              <td><code class="language-plaintext highlighter-rouge">&lt;client-secret&gt;</code></td>
            </tr>
            <tr>
              <td>AZURE_TENANT_ID</td>
              <td><code class="language-plaintext highlighter-rouge">&lt;tenant-id&gt;</code></td>
            </tr>
            <tr>
              <td>AZURE_SUBSCRIPTION_ID</td>
              <td><code class="language-plaintext highlighter-rouge">&lt;subscription-id&gt;</code></td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>Repeat this process for your other repository.</li>
    </ol>
  </li>
</ol>

<h3 id="create-the-github-actions-workflow">Create the GitHub Actions workflow</h3>

<p>Now that you have a service principal that can access your App Services, you need to edit the default workflow that was created for your apps when you configured continuous deployment so that it uses your service principal to authenticate instead of the publishing profile. For sample workflows, see the “Service principal” tab in <a href="https://learn.microsoft.com/azure/app-service/deploy-github-actions?tabs=userlevel#deploy-to-app-service">Deploy to App Service</a>. If you’ve been following along, use the below workflow.</p>

<ol>
  <li>Open your backend app’s GitHub repository and go to the <code class="language-plaintext highlighter-rouge">nodejs-backend/.github/workflows/</code> directory. You’ll see the autogenerated workflow.</li>
  <li>
    <p>Select the “pencil” button in the top right to edit the file. Replace the contents with the below, which assumes you created the GitHub secrets earlier for your credential, update the placeholders under “env”, and then commit directly to the main branch. This commit will trigger the GitHub Action to run again and deploy your code, this time using the service principal to authenticate.</p>

    <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
 <span class="na">name</span><span class="pi">:</span> <span class="s">Build and deploy Node.js app to Azure Web App</span>
    
 <span class="na">on</span><span class="pi">:</span>
   <span class="na">push</span><span class="pi">:</span>
     <span class="na">branches</span><span class="pi">:</span>
       <span class="pi">-</span> <span class="s">main</span>
   <span class="na">workflow_dispatch</span><span class="pi">:</span>
    
 <span class="na">env</span><span class="pi">:</span>
   <span class="na">AZURE_WEBAPP_NAME</span><span class="pi">:</span> <span class="s">&lt;web-app-name&gt;</span>   <span class="c1"># set this to your application's name</span>
   <span class="na">NODE_VERSION</span><span class="pi">:</span> <span class="s1">'</span><span class="s">18.x'</span>                <span class="c1"># set this to the node version to use</span>
   <span class="na">AZURE_WEBAPP_PACKAGE_PATH</span><span class="pi">:</span> <span class="s1">'</span><span class="s">.'</span>      <span class="c1"># set this to the path to your web app project, defaults to the repository root</span>
   <span class="na">AZURE_WEBAPP_SLOT_NAME</span><span class="pi">:</span> <span class="s">stage</span>       <span class="c1"># set this to your application's slot name</span>
    
 <span class="na">jobs</span><span class="pi">:</span>
   <span class="na">build</span><span class="pi">:</span>
     <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    
     <span class="na">steps</span><span class="pi">:</span>
       <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v2</span>
            
       <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Set up Node.js version</span>
         <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-node@v1</span>
         <span class="na">with</span><span class="pi">:</span>
           <span class="na">node-version</span><span class="pi">:</span> <span class="s">${{ env.NODE_VERSION }}</span>
    
       <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">npm install, build</span>
         <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
           <span class="s">npm install</span>
           <span class="s">npm run build --if-present</span>
    
       <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Upload artifact for deployment job</span>
         <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/upload-artifact@v2</span>
         <span class="na">with</span><span class="pi">:</span>
           <span class="na">name</span><span class="pi">:</span> <span class="s">node-app</span>
           <span class="na">path</span><span class="pi">:</span> <span class="s">.</span>
    
   <span class="na">deploy</span><span class="pi">:</span>
     <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
     <span class="na">needs</span><span class="pi">:</span> <span class="s">build</span>
     <span class="na">environment</span><span class="pi">:</span>
       <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">stage'</span>
       <span class="na">url</span><span class="pi">:</span> <span class="s">${{ steps.deploy-to-webapp.outputs.webapp-url }}</span>
    
     <span class="na">steps</span><span class="pi">:</span>
       <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Download artifact from build job</span>
         <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/download-artifact@v2</span>
         <span class="na">with</span><span class="pi">:</span>
           <span class="na">name</span><span class="pi">:</span> <span class="s">node-app</span>

       <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">azure/login@v1</span>
         <span class="na">with</span><span class="pi">:</span>
           <span class="na">creds</span><span class="pi">:</span> <span class="pi">|</span>
             <span class="s">{</span>
               <span class="s">"clientId": "${{ secrets.AZURE_APP_ID }}",</span>
               <span class="s">"clientSecret":  "${{ secrets.AZURE_PASSWORD }}",</span>
               <span class="s">"subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",</span>
               <span class="s">"tenantId": "${{ secrets.AZURE_TENANT_ID }}"</span>
             <span class="s">}</span>
    
       <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Deploy</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">Azure</span><span class="nv"> </span><span class="s">Web</span><span class="nv"> </span><span class="s">App'</span>
         <span class="na">id</span><span class="pi">:</span> <span class="s">deploy-to-webapp</span>
         <span class="na">uses</span><span class="pi">:</span> <span class="s">azure/webapps-deploy@v2</span>
         <span class="na">with</span><span class="pi">:</span>
           <span class="na">app-name</span><span class="pi">:</span> <span class="s">${{ env.AZURE_WEBAPP_NAME }}</span>
           <span class="na">slot-name</span><span class="pi">:</span> <span class="s">${{ env.AZURE_WEBAPP_SLOT_NAME }}</span>
           <span class="na">package</span><span class="pi">:</span> <span class="s">${{ env.AZURE_WEBAPP_PACKAGE_PATH }}</span>
              
       <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">logout</span>
         <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
           <span class="s">az logout</span>
</code></pre></div>    </div>
  </li>
  <li>Repeat this process for for the frontend app. The workflow can be found in <code class="language-plaintext highlighter-rouge">nodejs-frontend/.github/workflows/</code>.</li>
</ol>

<p>After a couple minutes, the deployments to the two app’s staging slots will finish. Your backend web app slot is locked down, but you can update the access restrictions for it if you want to validate that the code was deployed. Alternatively, you can skip that and go straight to the frontend app slot and test from there.</p>

<p>Navigate to your frontend in a browser. The URL should look like <em><a href="https://frontend-web-app-name-stage.azurewebsites.net">https://frontend-web-app-name-stage.azurewebsites.net</a></em>. The frontend app is a simple web scraper that will display the HTML body of a website. All it’s doing is calling the backend app and if it can reach the backend, it will display the site contents of the backend web app. I designed this site to work specifically with the provided backend web app. The web scraper will work with other sites, but the HTML it will return will be messy. Get your backend slot’s URL and paste that into the textbox. Hit “Go”, and after a couple seconds, you should see “Hello from the backend web app!” which is the site contents for the backend. If the app crashes, that means your access restrictions or private endpoint are misconfigured. If you didn’t set up the private endpoint and virtual network infrastructure for your slots, you can skip this testing as you’ve already validated it works in production. If all goes well, you’re ready to slot swap into production.</p>

<h3 id="slot-swap">Slot swap</h3>

<p>Once you’re done testing and validating, you can perform a <a href="https://learn.microsoft.com/azure/app-service/deploy-staging-slots#swap-two-slots">slot swap</a> from your staging site to your production site for each of your apps. During a slot swap, the App Service platform <a href="https://learn.microsoft.com/azure/app-service/deploy-staging-slots#swap-operation-steps">ensures the target slot doesn’t experience downtime</a>.</p>

<p>To perform the swap:</p>

<ol>
  <li>
    <p>Go to your app’s <strong>Deployment slots</strong> page and select <strong>Swap</strong>. The <strong>Swap</strong> dialog box shows settings in the selected source and target slots that will be changed.</p>

    <p><img src="/AppService/media/2022/11/swapbuttonbar.png" alt="" /></p>
  </li>
  <li>
    <p>Select the desired <strong>Source</strong> and <strong>Target</strong> slots. Also, select the <strong>Source Changes</strong> and <strong>Target Changes</strong> tabs and verify that the configuration changes are expected. When you’re finished, you can swap the slots immediately by selecting <strong>Swap</strong>.</p>

    <p><img src="/AppService/media/2022/11/swapimmediately.png" alt="" /></p>
  </li>
  <li>
    <p>Repeat the process for your other app.</p>
  </li>
</ol>

<p>After a few minutes, you can navigate to your production frontend app to validate the slot swap succeeded. You should copy and paste your production backend app’s URL into the textbox and confirm you get the message “Hello from the backend web app!”. If you do, congrats, you completed the tutorial! If the app crashes, go back through this post to ensure your connections are configured properly.</p>

<p>At this point, your apps are up and running and any changes you make to your source code will automatically trigger an update to both of your staging apps. You can then repeat the slot swap process described above when you’re ready to move that code into production.</p>

<h2 id="clean-up-resources">Clean up resources</h2>

<p>After you’re done, you can remove all the items you created. Deleting a resource group also deletes its contents.</p>

<h2 id="deploy-from-armbicep">Deploy from ARM/Bicep</h2>

<p>All of the resources in this post can be deployed using an ARM/Bicep template. A sample template is shown below, which creates empty apps following the security best practices outlined in this post. You’ll need to configure the slots and deployment source as well as the service principal once the template resources are created. To learn how to deploy ARM/Bicep templates, see <a href="https://learn.microsoft.com/azure/azure-resource-manager/bicep/deploy-cli">How to deploy resources with Bicep and Azure CLI</a>.</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">@</span><span class="s">description('Name of the VNet')</span>
<span class="s">param virtualNetworkName string = 'vnet-ntier'</span>

<span class="err">@</span><span class="s">description('Name of the Web Farm')</span>
<span class="s">param serverFarmName string = 'serverfarm-ntier'</span>

<span class="err">@</span><span class="s">description('Backend name must be unique DNS name worldwide')</span>
<span class="s">param site1_Name string = 'backend-${uniqueString(resourceGroup().id)}'</span>

<span class="err">@</span><span class="s">description('Frontend name must be unique DNS name worldwide')</span>
<span class="s">param site2_Name string = 'frontend-${uniqueString(resourceGroup().id)}'</span>

<span class="err">@</span><span class="s">description('CIDR of your VNet')</span>
<span class="s">param virtualNetwork_CIDR string = '10.200.0.0/16'</span>

<span class="err">@</span><span class="s">description('Name of the subnet')</span>
<span class="s">param subnet1Name string = 'PrivateEndpointSubnet'</span>

<span class="err">@</span><span class="s">description('Name of the subnet')</span>
<span class="s">param subnet2Name string = 'VnetIntegrationSubnet'</span>

<span class="err">@</span><span class="s">description('CIDR of your subnet')</span>
<span class="s">param subnet1_CIDR string = '10.200.1.0/24'</span>

<span class="err">@</span><span class="s">description('CIDR of your subnet')</span>
<span class="s">param subnet2_CIDR string = '10.200.2.0/24'</span>

<span class="err">@</span><span class="s">description('Location for all resources.')</span>
<span class="s">param location string = resourceGroup().location</span>

<span class="err">@</span><span class="s">description('SKU name, must be minimum P1v2')</span>
<span class="err">@</span><span class="s">allowed([</span>
  <span class="s">'P1v2'</span>
  <span class="s">'P2v2'</span>
  <span class="s">'P3v2'</span>
<span class="err">]</span><span class="s">)</span>
<span class="s">param skuName string = 'P1v2'</span>

<span class="err">@</span><span class="s">description('SKU size, must be minimum P1v2')</span>
<span class="err">@</span><span class="s">allowed([</span>
  <span class="s">'P1v2'</span>
  <span class="s">'P2v2'</span>
  <span class="s">'P3v2'</span>
<span class="err">]</span><span class="s">)</span>
<span class="s">param skuSize string = 'P1v2'</span>

<span class="err">@</span><span class="s">description('SKU family, must be minimum P1v2')</span>
<span class="err">@</span><span class="s">allowed([</span>
  <span class="s">'P1v2'</span>
  <span class="s">'P2v2'</span>
  <span class="s">'P3v2'</span>
<span class="err">]</span><span class="s">)</span>
<span class="s">param skuFamily string = 'P1v2'</span>

<span class="err">@</span><span class="s">description('Name of your Private Endpoint')</span>
<span class="s">param privateEndpointName string = 'PrivateEndpoint1'</span>

<span class="err">@</span><span class="s">description('Link name between your Private Endpoint and your Web App')</span>
<span class="s">param privateLinkConnectionName string = 'PrivateEndpointLink1'</span>

<span class="s">var webapp_dns_name = '.azurewebsites.net'</span>
<span class="s">var privateDNSZoneName = 'privatelink.azurewebsites.net'</span>
<span class="s">var SKU_tier = 'PremiumV2'</span>

<span class="s">resource virtualNetwork 'Microsoft.Network/virtualNetworks@2020-06-01' = {</span>
  <span class="s">name</span><span class="err">:</span> <span class="s">virtualNetworkName</span>
  <span class="s">location</span><span class="err">:</span> <span class="s">location</span>
  <span class="s">properties</span><span class="err">:</span> <span class="pi">{</span>
    <span class="nv">addressSpace</span><span class="pi">:</span> <span class="pi">{</span>
      <span class="nv">addressPrefixes</span><span class="pi">:</span> <span class="pi">[</span>
        <span class="nv">virtualNetwork_CIDR</span>
      <span class="pi">]</span>
    <span class="pi">}</span>
    <span class="nv">subnets</span><span class="pi">:</span> <span class="pi">[</span>
      <span class="pi">{</span>
        <span class="nv">name</span><span class="pi">:</span> <span class="nv">subnet1Name</span>
        <span class="nv">properties</span><span class="pi">:</span> <span class="pi">{</span>
          <span class="nv">addressPrefix</span><span class="pi">:</span> <span class="nv">subnet1_CIDR</span>
          <span class="nv">privateEndpointNetworkPolicies</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Disabled'</span>
        <span class="pi">}</span>
      <span class="pi">}</span>
      <span class="pi">{</span>
        <span class="nv">name</span><span class="pi">:</span> <span class="nv">subnet2Name</span>
        <span class="nv">properties</span><span class="pi">:</span> <span class="pi">{</span>
          <span class="nv">addressPrefix</span><span class="pi">:</span> <span class="nv">subnet2_CIDR</span>
          <span class="nv">delegations</span><span class="pi">:</span> <span class="pi">[</span>
            <span class="pi">{</span>
              <span class="nv">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">delegation'</span>
              <span class="nv">properties</span><span class="pi">:</span> <span class="pi">{</span>
                <span class="nv">serviceName</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Microsoft.Web/serverfarms'</span>
              <span class="pi">}</span>
            <span class="pi">}</span>
          <span class="pi">]</span>
          <span class="nv">privateEndpointNetworkPolicies</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Enabled'</span>
        <span class="pi">}</span>
      <span class="pi">}</span>
    <span class="pi">]</span>
  <span class="pi">}</span>
<span class="err">}</span>

<span class="s">resource serverFarm 'Microsoft.Web/serverfarms@2020-06-01' = {</span>
  <span class="s">name</span><span class="err">:</span> <span class="s">serverFarmName</span>
  <span class="s">location</span><span class="err">:</span> <span class="s">location</span>
  <span class="s">sku</span><span class="err">:</span> <span class="pi">{</span>
    <span class="nv">name</span><span class="pi">:</span> <span class="nv">skuName</span>
    <span class="nv">tier</span><span class="pi">:</span> <span class="nv">SKU_tier</span>
    <span class="nv">size</span><span class="pi">:</span> <span class="nv">skuSize</span>
    <span class="nv">family</span><span class="pi">:</span> <span class="nv">skuFamily</span>
    <span class="nv">capacity</span><span class="pi">:</span> <span class="nv">1</span>
  <span class="pi">}</span>
  <span class="na">kind</span><span class="pi">:</span> <span class="s1">'</span><span class="s">app'</span>
  <span class="na">properties</span><span class="pi">:</span> <span class="pi">{</span>
    <span class="nv">reserved</span><span class="pi">:</span> <span class="nv">true</span>
  <span class="pi">}</span>
<span class="err">}</span>

<span class="s">resource webApp1 'Microsoft.Web/sites@2020-06-01' = {</span>
  <span class="s">name</span><span class="err">:</span> <span class="s">site1_Name</span>
  <span class="s">location</span><span class="err">:</span> <span class="s">location</span>
  <span class="s">kind</span><span class="err">:</span> <span class="s1">'</span><span class="s">app'</span>
  <span class="na">properties</span><span class="pi">:</span> <span class="pi">{</span>
    <span class="nv">serverFarmId</span><span class="pi">:</span> <span class="nv">serverFarm.id</span>
  <span class="pi">}</span>
<span class="err">}</span>

<span class="s">resource ftpPolicy1 'Microsoft.Web/sites/basicPublishingCredentialsPolicies@2022-03-01' = {</span>
  <span class="s">name</span><span class="err">:</span> <span class="s1">'</span><span class="s">ftp'</span>
  <span class="na">kind</span><span class="pi">:</span> <span class="s1">'</span><span class="s">string'</span>
  <span class="na">parent</span><span class="pi">:</span> <span class="s">webApp1</span>
  <span class="na">location</span><span class="pi">:</span> <span class="s">location</span>
  <span class="na">properties</span><span class="pi">:</span> <span class="pi">{</span>
    <span class="nv">allow</span><span class="pi">:</span> <span class="nv">false</span>
  <span class="pi">}</span>
<span class="err">}</span>

<span class="s">resource scmPolicy1 'Microsoft.Web/sites/basicPublishingCredentialsPolicies@2022-03-01' = {</span>
  <span class="s">name</span><span class="err">:</span> <span class="s1">'</span><span class="s">scm'</span>
  <span class="na">kind</span><span class="pi">:</span> <span class="s1">'</span><span class="s">string'</span>
  <span class="na">parent</span><span class="pi">:</span> <span class="s">webApp1</span>
  <span class="na">location</span><span class="pi">:</span> <span class="s">location</span>
  <span class="na">properties</span><span class="pi">:</span> <span class="pi">{</span>
    <span class="nv">allow</span><span class="pi">:</span> <span class="nv">false</span>
  <span class="pi">}</span>
<span class="err">}</span>

<span class="s">resource webApp2 'Microsoft.Web/sites@2020-06-01' = {</span>
  <span class="s">name</span><span class="err">:</span> <span class="s">site2_Name</span>
  <span class="s">location</span><span class="err">:</span> <span class="s">location</span>
  <span class="s">kind</span><span class="err">:</span> <span class="s1">'</span><span class="s">app'</span>
  <span class="na">properties</span><span class="pi">:</span> <span class="pi">{</span>
    <span class="nv">serverFarmId</span><span class="pi">:</span> <span class="nv">serverFarm.id</span>
    <span class="nv">virtualNetworkSubnetId</span><span class="pi">:</span> <span class="nv">resourceId('Microsoft.Network/virtualNetworks/subnets'</span><span class="pi">,</span> <span class="nv">virtualNetwork.name</span><span class="pi">,</span> <span class="nv">subnet2Name)</span>
    <span class="nv">vnetRouteAllEnabled</span><span class="pi">:</span> <span class="nv">true</span>
  <span class="pi">}</span>
<span class="err">}</span>

<span class="s">resource ftpPolicy2 'Microsoft.Web/sites/basicPublishingCredentialsPolicies@2022-03-01' = {</span>
  <span class="s">name</span><span class="err">:</span> <span class="s1">'</span><span class="s">ftp'</span>
  <span class="na">kind</span><span class="pi">:</span> <span class="s1">'</span><span class="s">string'</span>
  <span class="na">parent</span><span class="pi">:</span> <span class="s">webApp2</span>
  <span class="na">location</span><span class="pi">:</span> <span class="s">location</span>
  <span class="na">properties</span><span class="pi">:</span> <span class="pi">{</span>
    <span class="nv">allow</span><span class="pi">:</span> <span class="nv">false</span>
  <span class="pi">}</span>
<span class="err">}</span>

<span class="s">resource scmPolicy2 'Microsoft.Web/sites/basicPublishingCredentialsPolicies@2022-03-01' = {</span>
  <span class="s">name</span><span class="err">:</span> <span class="s1">'</span><span class="s">scm'</span>
  <span class="na">kind</span><span class="pi">:</span> <span class="s1">'</span><span class="s">string'</span>
  <span class="na">parent</span><span class="pi">:</span> <span class="s">webApp2</span>
  <span class="na">location</span><span class="pi">:</span> <span class="s">location</span>
  <span class="na">properties</span><span class="pi">:</span> <span class="pi">{</span>
    <span class="nv">allow</span><span class="pi">:</span> <span class="nv">false</span>
  <span class="pi">}</span>
<span class="err">}</span>

<span class="s">resource webApp1Config 'Microsoft.Web/sites/config@2020-06-01' = {</span>
  <span class="s">parent</span><span class="err">:</span> <span class="s">webApp1</span>
  <span class="s">name</span><span class="err">:</span> <span class="s1">'</span><span class="s">web'</span>
  <span class="na">properties</span><span class="pi">:</span> <span class="pi">{</span>
    <span class="nv">ftpsState</span><span class="pi">:</span> <span class="s1">'</span><span class="s">AllAllowed'</span>
  <span class="pi">}</span>
<span class="err">}</span>

<span class="s">resource webApp2Config 'Microsoft.Web/sites/config@2020-06-01' = {</span>
  <span class="s">parent</span><span class="err">:</span> <span class="s">webApp2</span>
  <span class="s">name</span><span class="err">:</span> <span class="s1">'</span><span class="s">web'</span>
  <span class="na">properties</span><span class="pi">:</span> <span class="pi">{</span>
    <span class="nv">ftpsState</span><span class="pi">:</span> <span class="s1">'</span><span class="s">AllAllowed'</span>
    <span class="nv">scmIpSecurityRestrictionsDefaultAction</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Deny'</span>
  <span class="pi">}</span>
<span class="err">}</span>

<span class="s">resource webApp1Binding 'Microsoft.Web/sites/hostNameBindings@2019-08-01' = {</span>
  <span class="s">parent</span><span class="err">:</span> <span class="s">webApp1</span>
  <span class="s">name</span><span class="err">:</span> <span class="s1">'</span><span class="s">${webApp1.name}${webapp_dns_name}'</span>
  <span class="na">properties</span><span class="pi">:</span> <span class="pi">{</span>
    <span class="nv">siteName</span><span class="pi">:</span> <span class="nv">webApp1.name</span>
    <span class="nv">hostNameType</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Verified'</span>
  <span class="pi">}</span>
<span class="err">}</span>

<span class="s">resource webApp2Binding 'Microsoft.Web/sites/hostNameBindings@2019-08-01' = {</span>
  <span class="s">parent</span><span class="err">:</span> <span class="s">webApp2</span>
  <span class="s">name</span><span class="err">:</span> <span class="s1">'</span><span class="s">${webApp2.name}${webapp_dns_name}'</span>
  <span class="na">properties</span><span class="pi">:</span> <span class="pi">{</span>
    <span class="nv">siteName</span><span class="pi">:</span> <span class="nv">webApp2.name</span>
    <span class="nv">hostNameType</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Verified'</span>
  <span class="pi">}</span>
<span class="err">}</span>

<span class="s">resource privateEndpoint 'Microsoft.Network/privateEndpoints@2020-06-01' = {</span>
  <span class="s">name</span><span class="err">:</span> <span class="s">privateEndpointName</span>
  <span class="s">location</span><span class="err">:</span> <span class="s">location</span>
  <span class="s">properties</span><span class="err">:</span> <span class="pi">{</span>
    <span class="nv">subnet</span><span class="pi">:</span> <span class="pi">{</span>
      <span class="nv">id</span><span class="pi">:</span> <span class="nv">resourceId('Microsoft.Network/virtualNetworks/subnets'</span><span class="pi">,</span> <span class="nv">virtualNetwork.name</span><span class="pi">,</span> <span class="nv">subnet1Name)</span>
    <span class="pi">}</span>
    <span class="nv">privateLinkServiceConnections</span><span class="pi">:</span> <span class="pi">[</span>
      <span class="pi">{</span>
        <span class="nv">name</span><span class="pi">:</span> <span class="nv">privateLinkConnectionName</span>
        <span class="nv">properties</span><span class="pi">:</span> <span class="pi">{</span>
          <span class="nv">privateLinkServiceId</span><span class="pi">:</span> <span class="nv">webApp1.id</span>
          <span class="nv">groupIds</span><span class="pi">:</span> <span class="pi">[</span>
            <span class="s1">'</span><span class="s">sites'</span>
          <span class="pi">]</span>
        <span class="pi">}</span>
      <span class="pi">}</span>
    <span class="pi">]</span>
  <span class="pi">}</span>
<span class="err">}</span>

<span class="s">resource privateDnsZones 'Microsoft.Network/privateDnsZones@2018-09-01' = {</span>
  <span class="s">name</span><span class="err">:</span> <span class="s">privateDNSZoneName</span>
  <span class="s">location</span><span class="err">:</span> <span class="s1">'</span><span class="s">global'</span>
  <span class="na">dependsOn</span><span class="pi">:</span> <span class="pi">[</span>
    <span class="nv">virtualNetwork</span>
  <span class="pi">]</span>
<span class="err">}</span>

<span class="s">resource privateDnsZoneLink 'Microsoft.Network/privateDnsZones/virtualNetworkLinks@2018-09-01' = {</span>
  <span class="s">parent</span><span class="err">:</span> <span class="s">privateDnsZones</span>
  <span class="s">name</span><span class="err">:</span> <span class="s1">'</span><span class="s">${privateDnsZones.name}-link'</span>
  <span class="na">location</span><span class="pi">:</span> <span class="s1">'</span><span class="s">global'</span>
  <span class="na">properties</span><span class="pi">:</span> <span class="pi">{</span>
    <span class="nv">registrationEnabled</span><span class="pi">:</span> <span class="nv">false</span>
    <span class="nv">virtualNetwork</span><span class="pi">:</span> <span class="pi">{</span>
      <span class="nv">id</span><span class="pi">:</span> <span class="nv">virtualNetwork.id</span>
    <span class="pi">}</span>
  <span class="pi">}</span>
<span class="err">}</span>

<span class="s">resource privateDnsZoneGroup 'Microsoft.Network/privateEndpoints/privateDnsZoneGroups@2020-03-01' = {</span>
  <span class="s">parent</span><span class="err">:</span> <span class="s">privateEndpoint</span>
  <span class="s">name</span><span class="err">:</span> <span class="s1">'</span><span class="s">dnsgroupname'</span>
  <span class="na">properties</span><span class="pi">:</span> <span class="pi">{</span>
    <span class="nv">privateDnsZoneConfigs</span><span class="pi">:</span> <span class="pi">[</span>
      <span class="pi">{</span>
        <span class="nv">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">config1'</span>
        <span class="nv">properties</span><span class="pi">:</span> <span class="pi">{</span>
          <span class="nv">privateDnsZoneId</span><span class="pi">:</span> <span class="nv">privateDnsZones.id</span>
        <span class="pi">}</span>
      <span class="pi">}</span>
    <span class="pi">]</span>
  <span class="pi">}</span>
<span class="err">}</span>
</code></pre></div></div>]]></content><author><name>Azure App Service</name></author><category term="networking" /><summary type="html"><![CDATA[Many applications will consist of more than just a single component. For example, you may have a frontend which is publicly accessible that connects to a backend database, storage account, key vault, another VM, or a combination of these, which make up what’s known as an n-tier application. It’s important that applications like this are architected so that access is limited to privileged individuals and any component that is not intended for public consumptions is locked down to the greatest extent available for your use case.]]></summary></entry><entry><title type="html">Announcing Larger SKUs for App Service Environment v3</title><link href="https://azure.github.io/AppService/2022/12/01/Announcing-Larger-Isolatedv2-SKUs.html" rel="alternate" type="text/html" title="Announcing Larger SKUs for App Service Environment v3" /><published>2022-12-01T00:00:00+00:00</published><updated>2022-12-01T00:00:00+00:00</updated><id>https://azure.github.io/AppService/2022/12/01/Announcing-Larger-Isolatedv2-SKUs</id><content type="html" xml:base="https://azure.github.io/AppService/2022/12/01/Announcing-Larger-Isolatedv2-SKUs.html"><![CDATA[<p>Our engineering teams have been hard at work to deliver the new larger SKUs on App Service Environment v3. While it seems simple, as it is multiples of the existing SKU sizes, we took the opportunity to make some major adjustments, and build a more flexible backend to allow us to introduce more compute options in the future.</p>

<p>With the addition of these new Isolated V2 SKUs, these are the SKUs available for App Service Environment v3.</p>

<table>
  <thead>
    <tr>
      <th><strong>SKU Name</strong></th>
      <th><strong>vCPUs</strong></th>
      <th><strong>Memory</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>I1v2</td>
      <td>2 vCPUs</td>
      <td>8 GB</td>
    </tr>
    <tr>
      <td>I2v2</td>
      <td>4 vCPUs</td>
      <td>16 GB</td>
    </tr>
    <tr>
      <td>I3v2</td>
      <td>8 vCPUs</td>
      <td>32 GB</td>
    </tr>
    <tr>
      <td>I4v2</td>
      <td>16 vCPUs</td>
      <td>64 GB</td>
    </tr>
    <tr>
      <td>I5v2</td>
      <td>32 vCPUs</td>
      <td>128 GB</td>
    </tr>
    <tr>
      <td>I6v2</td>
      <td>64 vCPUs</td>
      <td>256 GB</td>
    </tr>
  </tbody>
</table>

<p>You can create new plans and scale in the Azure portal with the new SKUs. The new SKUs are not available if you create both App Service Environment and plan as part of creating a new app in the portal, but you can scale up after creating it. Prices may also not be visible in all regions, but are 2x increments as shown in this screenshot.</p>

<p><img src="/AppService/media/2022/12/ase-larger-skus-portal.png" alt="Larger SKUs on App Service Environment in Azure portal" class="align-center" /></p>

<p>Download the latest Azure CLI to have support for the new SKUs using <code class="language-plaintext highlighter-rouge">az appservice create/update</code>. Note that the command will take about 40 minutes for Windows and 15 minutes for Linux to complete the create/update operation (use the <code class="language-plaintext highlighter-rouge">--no-wait</code> parameter to avoid having to wait for the command to finish in the console):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az appservice plan create/update <span class="nt">--name</span> &lt;plan name&gt; <span class="nt">--sku</span> I5v2 <span class="nt">-g</span> &lt;resource-group-name&gt; <span class="nt">-e</span> &lt;ase-name or resource-id&gt; <span class="nt">--no-wait</span>
</code></pre></div></div>

<p>To deploy a new plan or update an existing plan using ARM, you can simply just specify the new SKU names. If you use the template below, just replace the values prefixed with REPLACE. For the <code class="language-plaintext highlighter-rouge">reserved</code> property, true = Linux, false = Windows.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
    <span class="dl">"</span><span class="s2">$schema</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">contentVersion</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">1.0.0.0</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">variables</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">"</span><span class="s2">appServicePlanName</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">REPLACE-PLAN-NAME</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">appServicePlanSize</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">I4v2</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">appServicePlanInstanceCount</span><span class="dl">"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">location</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">[resourceGroup().location]</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">appServiceEnvironmentResourceId</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">/subscriptions/REPLACE-SUB-ID/resourceGroups/REPLACE-RG-NAME/providers/Microsoft.Web/hostingEnvironments/REPLACE-ASE-NAME</span><span class="dl">"</span>
    <span class="p">},</span>
    <span class="dl">"</span><span class="s2">resources</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span>
            <span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">[variables('appServicePlanName')]</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Microsoft.Web/serverfarms</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">apiVersion</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">2021-03-01</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">location</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">[variables('location')]</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">properties</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="dl">"</span><span class="s2">reserved</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
                <span class="dl">"</span><span class="s2">hostingEnvironmentProfile</span><span class="dl">"</span> <span class="p">:{</span>
                    <span class="dl">"</span><span class="s2">id</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">[variables('appServiceEnvironmentResourceId')]</span><span class="dl">"</span>
                <span class="p">}</span>
            <span class="p">},</span>
            <span class="dl">"</span><span class="s2">sku</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">[variables('appServicePlanSize')]</span><span class="dl">"</span><span class="p">,</span>
                <span class="dl">"</span><span class="s2">capacity</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">[variables('appServicePlanInstanceCount')]</span><span class="dl">"</span>
            <span class="p">}</span>
        <span class="p">}</span>
     <span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Looking forward to see what you will do with all that power!</p>

<h3 id="questionsfeedback">Questions/Feedback</h3>

<p>If you have any questions or feedback, please reach out to our team at <a href="mailto:appserviceenvpm@microsoft.com">AppServiceEnvPM@microsoft.com</a></p>]]></content><author><name>Azure App Service</name></author><summary type="html"><![CDATA[Our engineering teams have been hard at work to deliver the new larger SKUs on App Service Environment v3. While it seems simple, as it is multiples of the existing SKU sizes, we took the opportunity to make some major adjustments, and build a more flexible backend to allow us to introduce more compute options in the future.]]></summary></entry><entry><title type="html">Advanced access restriction scenarios in Azure App Service</title><link href="https://azure.github.io/AppService/2022/11/24/Advanced-access-restriction-scenarios-in-Azure-App-Service.html" rel="alternate" type="text/html" title="Advanced access restriction scenarios in Azure App Service" /><published>2022-11-24T00:00:00+00:00</published><updated>2022-11-24T00:00:00+00:00</updated><id>https://azure.github.io/AppService/2022/11/24/Advanced-access-restriction-scenarios-in-Azure-App-Service</id><content type="html" xml:base="https://azure.github.io/AppService/2022/11/24/Advanced-access-restriction-scenarios-in-Azure-App-Service.html"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>Currently, you can use two options when configuring Azure App Service access restrictions. The preview feature provides some new scenarios that you should know.</p>

<p>This article will walk you through building a demo environment where you will test advanced access restriction scenarios in Azure App Service.</p>

<p><img src="/AppService/media/2022/11/access_restriction.png" alt="Access restriction" class="align-center" /></p>

<h2 id="access-restriction-advanced-scenarios">Access restriction advanced scenarios:</h2>

<ol>
  <li>Filter by http header</li>
  <li>Multi-source rules</li>
  <li>Block a single IP address</li>
  <li>Restrict access to the SCM site</li>
</ol>

<p>For more information about <em>App Service access restrictions</em>, visit <a href="https://learn.microsoft.com/azure/app-service/app-service-ip-restrictions">this page</a></p>

<p><strong>Requirements:</strong></p>

<p>Access to an Azure subscription.</p>

<p><strong>Decide where you will execute commands</strong></p>

<p>The best option to walk through this guide and execute commands would be using Azure Cloud Shell with Bash environment. Azure Cloud Shell is an interactive, authenticated, browser-accessible shell for managing Azure resources. It provides the flexibility of choosing the shell experience that best suits the way you work, either Bash or PowerShell. For information on how to use Azure Cloud Shell, visit <a href="https://docs.microsoft.com/azure/cloud-shell/overview">Azure Cloud Shell</a>. You can also install Azure CLI on your machine. The Azure CLI is available to install in Windows, macOS and Linux environments. It can also be run in a Docker container and Azure Cloud Shell. For information on how to install the Azure CLI, please visit <a href="https://docs.microsoft.com/cli/azure/install-azure-cli">Azure CLI installation</a>.</p>

<p>If you decide to use <a href="https://shell.azure.com">Azure Cloud Shell</a>, please use Bash environment.</p>

<h2 id="getting-started">Getting Started</h2>

<p><strong>Create folder for your data</strong></p>

<p>You can use the name below for your folder. You just need to replace <em>ardemo</em> with your environment name.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>ardemo
<span class="nb">cd </span>ardemo
</code></pre></div></div>

<p><strong>Choosing the right subscription</strong></p>

<p>If you have many subscriptions, you must select the subscription to which you want to deploy the resources.</p>

<p>Using this command you can find and copy the <em>SubscriptionId</em> on which you want to create resources for this scenario.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az account list <span class="nt">-o</span> table
</code></pre></div></div>

<p>Using this command you can set a subscription to be the current active subscription.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az account <span class="nb">set</span> <span class="nt">-s</span> YourSubscriptionID
</code></pre></div></div>

<p>You can find more information about <em>az account</em> command on this site <a href="https://docs.microsoft.com/cli/azure/account?view=azure-cli-latest">az account</a>.</p>

<p><strong>Prepare parameters</strong></p>

<p>When you construct your naming convention, identify the key pieces of information that you want to reflect in the resource names. Different information is relevant for different resource types. The following sites are useful when you construct resource names - <a href="https://docs.microsoft.com/azure/cloud-adoption-framework/ready/azure-best-practices/resource-naming">Define your naming convention</a> and <a href="https://docs.microsoft.com/azure/cloud-adoption-framework/ready/azure-best-practices/resource-abbreviations">Recommended abbreviations for Azure resource types</a>.</p>

<p>You can use the names below. You just need to replace <em>ardemo</em> with your environment name and change <em>LocationRegion</em> parameter.</p>

<p>Please copy and paste your parameters to your shell.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">LocationRegion</span><span class="o">=</span>westeurope
<span class="nv">ResourceGroupName</span><span class="o">=</span>rg-ardemo
<span class="nv">WebAppName</span><span class="o">=</span>app-ardemo-prod-01
<span class="nv">AppServicePlanName</span><span class="o">=</span>asp-ardemo-linux-prod-01
<span class="nv">VirtualNetworkName</span><span class="o">=</span>vnet-ardemo-prod-westeurope-01
<span class="nv">SubnetNameVnet</span><span class="o">=</span>snet-ardemo-prod-westeurope-01
<span class="nv">VnetPrefix</span><span class="o">=</span>192.168.10.0/24
<span class="nv">SubnetVnetPrefix</span><span class="o">=</span>192.168.10.0/25
<span class="nv">PrivateEndpointName</span><span class="o">=</span>pep-ardemo-prod-01
<span class="nv">PrivateEndpointConnectionName</span><span class="o">=</span>con-pep-ardemo-prod-01
<span class="nv">FDName</span><span class="o">=</span>fd-ardemo-01
<span class="nv">OriginGroup</span><span class="o">=</span>origin-group-ardemo
<span class="nv">OriginNamePrimary</span><span class="o">=</span>primary
<span class="nv">LogAnalyticsName</span><span class="o">=</span>log-ardemo-01
<span class="nv">ApplicationInsightsName</span><span class="o">=</span>appi-ardemo-01
<span class="nv">ApplicationInsightsWebTestName</span><span class="o">=</span>WebsiteTest-<span class="nv">$WebAppName</span>
</code></pre></div></div>

<h2 id="create-basic-infrastructure">Create basic infrastructure</h2>

<p><strong>Create Resource Groups</strong></p>

<p>The demo environment will be organized using one resource group.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az group create <span class="nt">-l</span> <span class="nv">$LocationRegion</span> <span class="nt">-n</span> <span class="nv">$ResourceGroupName</span>
</code></pre></div></div>

<p><strong>Create virtual network with subnet for App Service Private Endpoint</strong></p>

<p>A virtual network will be required for <em>Azure App Service Private Endpoint</em>. This command will create a virtual network with a subnet.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az network vnet create <span class="nt">-g</span> <span class="nv">$ResourceGroupName</span> <span class="nt">-n</span> <span class="nv">$VirtualNetworkName</span> <span class="nt">--address-prefix</span> <span class="nv">$VnetPrefix</span> <span class="nt">--subnet-name</span> <span class="nv">$SubnetNameVnet</span> <span class="nt">--subnet-prefix</span> <span class="nv">$SubnetVnetPrefix</span>
</code></pre></div></div>

<p><strong>Create an App Service Plan</strong></p>

<p>An App Service plan defines a set of compute resources for a web app to run.</p>

<p>For more information about <em>Azure App Service plan</em>, visit <a href="https://learn.microsoft.com/azure/app-service/overview-hosting-plans">this page</a>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az appservice plan create <span class="nt">-n</span> <span class="nv">$AppServicePlanName</span> <span class="nt">-g</span> <span class="nv">$ResourceGroupName</span> <span class="nt">--location</span> <span class="nv">$LocationRegion</span> <span class="nt">--sku</span> P1V2 <span class="nt">--is-linux</span> <span class="nt">--number-of-workers</span> 1
</code></pre></div></div>

<p><strong>Create a Web App</strong></p>

<p>To create a PHP app in your <em>App Service plan</em> please use this command.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az webapp create <span class="nt">-n</span> <span class="nv">$WebAppName</span> <span class="nt">-g</span> <span class="nv">$ResourceGroupName</span> <span class="nt">--plan</span> <span class="nv">$AppServicePlanName</span> <span class="nt">--runtime</span> <span class="s2">"PHP:8.0"</span>
</code></pre></div></div>

<p>Create a variable with the URL of your website. You will use this variable later with <em>curl</em> command to check if your webapp is working correctly.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">URLofYourWebsite</span><span class="o">=</span><span class="si">$(</span>az webapp show <span class="nt">--name</span> <span class="nv">$WebAppName</span> <span class="nt">--resource-group</span> <span class="nv">$ResourceGroupName</span> <span class="nt">--query</span> defaultHostName <span class="nt">-o</span> tsv<span class="si">)</span>
</code></pre></div></div>

<p><strong>Create index.php file for your web app</strong></p>

<p>Sample code for your web app:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s1">'&lt;?php
 echo "Azure App Service access restrictions demo";
?&gt;'</span> <span class="o">&gt;</span> index.php
</code></pre></div></div>

<p><strong>Create zip file for your web app code</strong></p>

<p>In the next step you will use <em>ZIP Deploy</em> to deploy the application. You need a ZIP utility for this. If you’re using Azure Cloud Shell, ZIP utility is pre-installed and already available.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>zip YourWebSite.zip index.php
</code></pre></div></div>

<p><strong>Deploy sample app</strong></p>

<p>To deploy a sample application using <em>ZIP Deploy</em>, use this command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az webapp deployment <span class="nb">source </span>config-zip <span class="nt">--resource-group</span> <span class="nv">$ResourceGroupName</span>  <span class="nt">--name</span> <span class="nv">$WebAppName</span> <span class="nt">--src</span> ./YourWebSite.zip
</code></pre></div></div>

<p><strong>Check if your app is running</strong></p>

<p>Use your browser or use <em>curl</em> command to check if your app is working correctly.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl https://<span class="nv">$URLofYourWebsite</span>
</code></pre></div></div>

<p><strong>Create the Private Endpoint</strong></p>

<p>A private endpoint is a network interface that uses a private IP address from your virtual network. This network interface connects you privately and securely to a service that’s powered by Azure Private Link. By enabling a private endpoint, you’re bringing the service into your virtual network.</p>

<p>For more information about <em>private endpoint</em>, visit <a href="https://learn.microsoft.com/azure/private-link/private-endpoint-overview">this page</a>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">id</span><span class="o">=</span><span class="si">$(</span>az webapp show <span class="nt">--name</span> <span class="nv">$WebAppName</span> <span class="nt">--resource-group</span> <span class="nv">$ResourceGroupName</span> <span class="nt">--query</span> <span class="s1">'[id]'</span> <span class="nt">--output</span> tsv<span class="si">)</span>
az network private-endpoint create <span class="nt">-n</span> <span class="nv">$PrivateEndpointName</span> <span class="nt">-g</span> <span class="nv">$ResourceGroupName</span> <span class="nt">--vnet-name</span> <span class="nv">$VirtualNetworkName</span> <span class="nt">--subnet</span> <span class="nv">$SubnetNameVnet</span> <span class="nt">--connection-name</span> <span class="nv">$PrivateEndpointConnectionName</span> <span class="nt">--private-connection-resource-id</span> <span class="nv">$id</span> <span class="nt">--group-id</span> sites
</code></pre></div></div>

<p><strong>Configure the private DNS zone</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az network private-dns zone create <span class="nt">--name</span> privatelink.azurewebsites.net <span class="nt">--resource-group</span> <span class="nv">$ResourceGroupName</span>
az network private-dns <span class="nb">link </span>vnet create <span class="nt">--name</span> myDNSLink <span class="nt">--resource-group</span> <span class="nv">$ResourceGroupName</span> <span class="nt">--registration-enabled</span> <span class="nb">false</span> <span class="nt">--virtual-network</span> <span class="nv">$VirtualNetworkName</span> <span class="nt">--zone-name</span> privatelink.azurewebsites.net
az network private-endpoint dns-zone-group create <span class="nt">--name</span> myZoneGroup <span class="nt">--resource-group</span> <span class="nv">$ResourceGroupName</span> <span class="nt">--endpoint-name</span> <span class="nv">$PrivateEndpointName</span> <span class="nt">--private-dns-zone</span> privatelink.azurewebsites.net <span class="nt">--zone-name</span> privatelink.azurewebsites.net
</code></pre></div></div>

<p><strong>Check if your website is unavailable</strong></p>

<p>After enabling private endpoint, the web app should not be reachable from the Internet.</p>

<p>Use your browser or use <em>curl</em> command to check if your app is not reachable.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl https://<span class="nv">$URLofYourWebsite</span>
</code></pre></div></div>

<p>The result should look similar to this.</p>

<p><img src="/AppService/media/2022/11/curl_site_403.png" alt="Forbidden" class="align-center" /></p>

<p><strong>Optional test</strong></p>

<p>You can create a VM in the same virtual network as the private endpoint for Azure App Service and run a network connection test using private IP address. The name of the Azure App Service should resolve to a private IP address. You can check this using the <em>ping</em> or <em>nslookup</em> command. To check if the website is working properly by using the private IP address, use <em>curl</em> command or a browser on a VM that you will deploy.</p>

<blockquote>
  <p><strong>Remember</strong> to use the standard App Service URL. Thanks to the integration with private DNS zone, the name will be translated into a private IP address.
For more information about <em>Azure App Service private endpoint DNS</em>, visit <a href="https://learn.microsoft.com/azure/app-service/networking/private-endpoint#dns">this page</a>.</p>
</blockquote>

<h2 id="first-advanced-scenario---filter-by-http-header">First advanced scenario - Filter by http header</h2>

<p>Currently, you can run Azure App Service with a private endpoint as well as allow traffic from the Internet to Azure App Service. Thanks to this, you can use, for example, Azure Front Door Standard SKU to make Azure App Service available from the Internet. Previously, when using a private endpoint for Azure App Service, it was required to use the Azure Front Door Premium SKU.</p>

<p>For more information about <em>Secure Origin with Private Link in Azure Front Door Premium</em>, visit <a href="https://learn.microsoft.com/azure/frontdoor/private-link">this page</a>.</p>

<p>In this guide you will add a <em>rule</em> that will allow access from Azure Front Door Standard instance to your Azure App Service using <em>X-Azure-FDID</em>.</p>

<blockquote>
  <p><strong>Tip</strong> Access restrictions can use the following headers:</p>
  <ol>
    <li>X-Forwarded-Host - You can specify hostnames of the originating request to limit traffic if a load balancer or HTTP proxy supports hostname forwarding. Enter up to 8 hostnames separated by a comma.</li>
    <li>X-Forwarded-For - You can specify IP addresses of the originating client if a load balancer or HTTP proxy supports IP forwarding when the traffic is passing &gt;through. Enter up to 8 CIDR addresses separated by a comma.</li>
    <li>X-Azure-FDID - You can specify a unique instance id of Azure Front Door or reverse proxies supporting unique header identification. Enter up to 8 ids &gt;separated by a comma.</li>
    <li>X-FD-HealthProbe - You can specify health probe identification to allow probe traffic. Enter up to 8 health probe ids separated by a comma.</li>
  </ol>
</blockquote>

<p><strong>Enable public access</strong></p>

<p>To allow traffic from the Internet, use this command.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az resource update <span class="nt">--resource-group</span> <span class="nv">$ResourceGroupName</span> <span class="nt">--name</span> <span class="nv">$WebAppName</span> <span class="nt">--resource-type</span> <span class="s2">"Microsoft.Web/sites"</span> <span class="nt">--set</span> properties.publicNetworkAccess<span class="o">=</span>Enabled
</code></pre></div></div>

<p>You can also enable <em>Allow public access</em> from the GUI.</p>

<p><img src="/AppService/media/2022/11/access_restrictions_allow_public_access.png" alt="Allow public access" class="align-center" /></p>

<p><strong>Check if your website is available</strong></p>

<p>After enabling public access, the webapp should be available from the Internet and from the private endpoint.</p>

<p>Use your browser or <em>curl</em> command to check if your app is working correctly.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl https://<span class="nv">$URLofYourWebsite</span>
</code></pre></div></div>

<p><strong>Secure Access using Front Door Standard SKU</strong></p>

<p>Azure Front Door is Microsoft’s modern cloud Content Delivery Network (CDN) that provides fast, reliable, and secure access between your users and your applications’ static and dynamic web content across the globe. Azure Front Door delivers your content using the Microsoft’s global edge network with hundreds of global and local POPs distributed around the world close to both your enterprise and consumer end users.</p>

<p>For more information about <em>Azure Front Door</em>, visit <a href="https://learn.microsoft.com/azure/frontdoor/front-door-overview">this page</a>.</p>

<p><strong>Create Azure Front Door profile</strong></p>

<p>Run <code class="language-plaintext highlighter-rouge">az afd profile create</code> to create an Azure Front Door profile.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az afd profile create <span class="se">\</span>
    <span class="nt">--profile-name</span> <span class="nv">$FDName</span> <span class="se">\</span>
    <span class="nt">--resource-group</span> <span class="nv">$ResourceGroupName</span> <span class="se">\</span>
    <span class="nt">--sku</span> Standard_AzureFrontDoor
</code></pre></div></div>

<p><strong>Add an endpoint</strong></p>

<p>Run <code class="language-plaintext highlighter-rouge">az afd endpoint create</code> to create an endpoint in your profile.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az afd endpoint create <span class="se">\</span>
    <span class="nt">--resource-group</span> <span class="nv">$ResourceGroupName</span> <span class="se">\</span>
    <span class="nt">--endpoint-name</span> endpoint-<span class="nv">$FDName</span> <span class="se">\</span>
    <span class="nt">--profile-name</span> <span class="nv">$FDName</span> <span class="se">\</span>
    <span class="nt">--enabled-state</span> Enabled
</code></pre></div></div>

<p>Create a variable with the URL of your Azure Front Door endpoint. You will use this variable later with the <em>curl</em> command to check if your Azure Front Door endpoint is working correctly.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">URLofYourFrontDoorEndpoint</span><span class="o">=</span><span class="si">$(</span>az afd endpoint show <span class="se">\</span>
    <span class="nt">--resource-group</span> <span class="nv">$ResourceGroupName</span> <span class="se">\</span>
    <span class="nt">--profile-name</span> <span class="nv">$FDName</span> <span class="se">\</span>
    <span class="nt">--endpoint-name</span> endpoint-<span class="nv">$FDName</span> <span class="se">\</span>
    <span class="nt">--query</span> hostName <span class="nt">-o</span> tsv<span class="si">)</span>
</code></pre></div></div>

<p>You can also write down the URL of your Azure Front Door endpoint.</p>

<p><img src="/AppService/media/2022/10/url-front-door.png" alt="URL of your site" class="align-center" /></p>

<p><strong>Create an origin group</strong></p>

<p>Run <code class="language-plaintext highlighter-rouge">az afd origin-group create</code> to create an origin group that contains your web apps.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az afd origin-group create <span class="se">\</span>
    <span class="nt">--resource-group</span> <span class="nv">$ResourceGroupName</span> <span class="se">\</span>
    <span class="nt">--origin-group-name</span> <span class="nv">$OriginGroup</span> <span class="se">\</span>
    <span class="nt">--profile-name</span> <span class="nv">$FDName</span> <span class="se">\</span>
    <span class="nt">--probe-request-type</span> GET <span class="se">\</span>
    <span class="nt">--probe-protocol</span> Https <span class="se">\</span>
    <span class="nt">--probe-interval-in-seconds</span> 60 <span class="se">\</span>
    <span class="nt">--probe-path</span> / <span class="se">\</span>
    <span class="nt">--sample-size</span> 4 <span class="se">\</span>
    <span class="nt">--successful-samples-required</span> 3 <span class="se">\</span>
    <span class="nt">--additional-latency-in-milliseconds</span> 50
</code></pre></div></div>

<p><strong>Add an origin to the group - primary website</strong></p>

<p>Run <code class="language-plaintext highlighter-rouge">az afd origin create</code> to add an origin to your origin group.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az afd origin create <span class="se">\</span>
    <span class="nt">--resource-group</span> <span class="nv">$ResourceGroupName</span> <span class="se">\</span>
    <span class="nt">--host-name</span> <span class="nv">$URLofYourWebsite</span> <span class="se">\</span>
    <span class="nt">--profile-name</span> <span class="nv">$FDName</span> <span class="se">\</span>
    <span class="nt">--origin-group-name</span> <span class="nv">$OriginGroup</span> <span class="se">\</span>
    <span class="nt">--origin-name</span> <span class="nv">$OriginNamePrimary</span> <span class="se">\</span>
    <span class="nt">--origin-host-header</span> <span class="nv">$URLofYourWebsite</span> <span class="se">\</span>
    <span class="nt">--priority</span> 1 <span class="se">\</span>
    <span class="nt">--weight</span> 1000 <span class="se">\</span>
    <span class="nt">--enabled-state</span> Enabled <span class="se">\</span>
    <span class="nt">--http-port</span> 80 <span class="se">\</span>
    <span class="nt">--https-port</span> 443
</code></pre></div></div>

<p><strong>Add a route</strong></p>

<p>Run <code class="language-plaintext highlighter-rouge">az afd route create</code> to map your endpoint to the origin group. This route forwards requests from the endpoint to your origin group.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az afd route create <span class="se">\</span>
    <span class="nt">--resource-group</span> <span class="nv">$ResourceGroupName</span>  <span class="se">\</span>
    <span class="nt">--profile-name</span> <span class="nv">$FDName</span> <span class="se">\</span>
    <span class="nt">--endpoint-name</span> endpoint-<span class="nv">$FDName</span> <span class="se">\</span>
    <span class="nt">--forwarding-protocol</span> MatchRequest <span class="se">\</span>
    <span class="nt">--route-name</span> route <span class="se">\</span>
    <span class="nt">--https-redirect</span> Enabled <span class="se">\</span>
    <span class="nt">--origin-group</span> <span class="nv">$OriginGroup</span> <span class="se">\</span>
    <span class="nt">--supported-protocols</span> Http Https <span class="se">\</span>
    <span class="nt">--link-to-default-domain</span> Enabled
</code></pre></div></div>

<p>For more information about Azure CLI for Azure Front Door, visit <a href="https://learn.microsoft.com/azure/frontdoor/create-front-door-cli">Front Door CLI</a>.</p>

<p>In a production environment you will probably need to implement a WAF policy for you application. For more information about Azure CLI for Azure Front Door WAF Policy, visit <a href="https://learn.microsoft.com/azure/frontdoor/create-front-door-cli#create-a-new-security-policy">Front Door WAF Policy</a>.</p>

<p><strong>Check if your Azure Front Door Endpoint is running - this process may take a while</strong></p>

<p>Use your browser or <em>curl</em> command to check if your app is working correctly. It may take 10-15 minutes for your app to be accessible using Front Door.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl https://<span class="nv">$URLofYourFrontDoorEndpoint</span>
</code></pre></div></div>

<p><strong>Add X-Azure-FDID rule</strong></p>

<p>Create a variable with the ID of your Azure Front Door profile.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">YourFrontDoorID</span><span class="o">=</span><span class="si">$(</span>az afd profile show <span class="se">\</span>
    <span class="nt">--resource-group</span> <span class="nv">$ResourceGroupName</span> <span class="se">\</span>
    <span class="nt">--profile-name</span> <span class="nv">$FDName</span> <span class="se">\</span>
    <span class="nt">--query</span> frontDoorId <span class="nt">-o</span> tsv<span class="si">)</span>
</code></pre></div></div>

<p>Add a rule that only allows communication from the specific Azure Front Door profile.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az webapp config access-restriction add <span class="nt">--resource-group</span> <span class="nv">$ResourceGroupName</span> <span class="nt">--name</span> <span class="nv">$WebAppName</span> <span class="nt">--rule-name</span> FrontDoor <span class="nt">--action</span> Allow <span class="nt">--priority</span> 100 <span class="nt">--service-tag</span> AzureFrontDoor.Backend <span class="nt">--http-header</span> x-azure-fdid<span class="o">=</span><span class="nv">$YourFrontDoorID</span>
</code></pre></div></div>

<p><strong>Check if your app allow connections using Azure Front Door URL</strong></p>

<p>Use your browser or <em>curl</em> command to check if your app is working correctly using Azure Front Door URL.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl https://<span class="nv">$URLofYourFrontDoorEndpoint</span>
</code></pre></div></div>

<p><strong>Check if your app is blocked by network restrictions</strong></p>

<p>Use your browser or <em>curl</em> command to check if your app is not available via direct URL access.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl https://<span class="nv">$URLofYourWebsite</span>
</code></pre></div></div>

<h2 id="second-advanced-scenario---multi-source-rules">Second advanced scenario - Multi-source rules</h2>

<p>Multi-source rules allow you to combine up to eight IP ranges or eight Service Tags in a single rule. You might use this if you have more than 512 IP ranges or you want to create logical rules where multiple IP ranges are combined with a single http header filter.</p>

<p><strong>First example - add multiple ip ranges to rule</strong></p>

<p>In example 1, you will add several ip ranges to one rule.</p>

<p><strong>Prepare to run the first scenario</strong></p>

<p>To remove the policy from the previous scenario, please run the command below.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az webapp config access-restriction remove <span class="nt">--resource-group</span> <span class="nv">$ResourceGroupName</span> <span class="nt">--name</span> <span class="nv">$WebAppName</span> <span class="nt">--rule-name</span> FrontDoor
</code></pre></div></div>

<p>To change the default behavior <em>Unmatched rule action</em> to <em>Deny</em>, please run the command below.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az resource update <span class="nt">--resource-group</span> <span class="nv">$ResourceGroupName</span> <span class="nt">--name</span> <span class="nv">$WebAppName</span> <span class="nt">--resource-type</span> <span class="s2">"Microsoft.Web/sites"</span> <span class="nt">--set</span> properties.siteConfig.ipSecurityRestrictionsDefaultAction<span class="o">=</span>Deny
</code></pre></div></div>

<p><strong>Check if your app is blocked by network restrictions</strong></p>

<p>Use your browser or <em>curl</em> command to check if your app is blocked by network restrictions.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl https://<span class="nv">$URLofYourWebsite</span>
</code></pre></div></div>

<p><strong>Check your public IP addresses and create variable</strong></p>

<blockquote>
  <p><strong>Remember</strong> If you are using Azure Cloud Shell, remember that you will have a different public IP address every time you restart your console.</p>
</blockquote>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">YourPublicIPaddress</span><span class="o">=</span><span class="si">$(</span>curl icanhazip.com<span class="si">)</span>
</code></pre></div></div>

<blockquote>
  <p><strong>TIP</strong> You can also use a Powershell command to check your public IP address.</p>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>Invoke-WebRequest <span class="nt">-uri</span> <span class="s2">"http://ifconfig.me/ip"</span><span class="o">)</span>.Content
</code></pre></div>  </div>

  <p>or you can use curl command</p>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>curl icanhazip.com<span class="o">)</span>.Content
</code></pre></div>  </div>
</blockquote>

<p><strong>Add IP addresses to multi-source rule</strong></p>

<p>To add a rule that will block traffic from several IP ranges, run the below command.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az webapp config access-restriction add <span class="nt">--resource-group</span> <span class="nv">$ResourceGroupName</span> <span class="nt">--name</span> <span class="nv">$WebAppName</span> <span class="nt">--rule-name</span> AllowBranchWarsawIPaddresses <span class="nt">--action</span> Allow <span class="nt">--priority</span> 200 <span class="nt">--ip-address</span> 192.168.1.0/24,192.168.10.0/24,192.168.100.0/24,<span class="nv">$YourPublicIPaddress</span>
</code></pre></div></div>

<p><strong>Check if your app allows connections</strong></p>

<p>Use your browser or <em>curl</em> command to check if your app is working correctly.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl https://<span class="nv">$URLofYourWebsite</span>
</code></pre></div></div>

<p><strong>Second example - add multiple service tags to a network restriction rule</strong></p>

<p>This example show you how you can add multiple service tags to a network restriction rule. In this example we will allow connections from Logic Apps, Application Insights and API Management from West Europe. In this example you will test this rule using Application Insights availability test.</p>

<p><strong>Prepare to run the second example</strong></p>

<p>The following command will create <em>Application Insights</em> and <em>Log Analytics Workspace</em> for you.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az monitor log-analytics workspace create <span class="nt">--resource-group</span> <span class="nv">$ResourceGroupName</span> <span class="nt">--workspace-name</span> <span class="nv">$LogAnalyticsName</span>
<span class="nv">LogAnalyticsId</span><span class="o">=</span><span class="si">$(</span>az monitor log-analytics workspace show <span class="nt">--resource-group</span> <span class="nv">$ResourceGroupName</span> <span class="nt">--workspace-name</span> <span class="nv">$LogAnalyticsName</span> <span class="nt">--query</span> <span class="nb">id</span> <span class="nt">-o</span> tsv<span class="si">)</span>
<span class="nv">LogAnalyticsWorkspaceId</span><span class="o">=</span><span class="si">$(</span>az monitor log-analytics workspace show <span class="nt">--resource-group</span> <span class="nv">$ResourceGroupName</span> <span class="nt">--workspace-name</span> <span class="nv">$LogAnalyticsName</span> <span class="nt">--query</span> customerId <span class="nt">-o</span> tsv<span class="si">)</span>
az monitor app-insights component create <span class="nt">--app</span> <span class="nv">$ApplicationInsightsName</span> <span class="nt">--location</span> <span class="nv">$LocationRegion</span> <span class="nt">--kind</span> web <span class="nt">-g</span> <span class="nv">$ResourceGroupName</span> <span class="nt">--application-type</span> web <span class="nt">--workspace</span> <span class="nv">$LogAnalyticsId</span>
<span class="nv">ApplicationInsightId</span><span class="o">=</span><span class="si">$(</span>az monitor app-insights component show <span class="nt">--app</span> <span class="nv">$ApplicationInsightsName</span> <span class="nt">-g</span> <span class="nv">$ResourceGroupName</span> <span class="nt">--query</span> <span class="nb">id</span> <span class="nt">-o</span> tsv<span class="si">)</span>
az monitor app-insights web-test create <span class="nt">--web-test-kind</span> <span class="s2">"standard"</span> <span class="nt">--enabled</span> <span class="nb">true</span> <span class="nt">--location</span> <span class="nv">$LocationRegion</span> <span class="nt">--resource-group</span> <span class="nv">$ResourceGroupName</span> <span class="nt">--name</span> <span class="nv">$ApplicationInsightsWebTestName</span> <span class="nt">--defined-web-test-name</span> <span class="nv">$ApplicationInsightsWebTestName</span> <span class="nt">--tags</span> <span class="s2">"hidden-link:</span><span class="nv">$ApplicationInsightId</span><span class="s2">=Resource"</span> <span class="nt">--http-verb</span> <span class="s2">"GET"</span> <span class="nt">--request-url</span> <span class="s2">"https://</span><span class="nv">$URLofYourWebsite</span><span class="s2">"</span> <span class="nt">--timeout</span> 30 <span class="nt">--frequency</span> 300 <span class="nt">--retry-enabled</span> <span class="nb">true</span> <span class="nt">--locations</span> <span class="nv">Id</span><span class="o">=</span><span class="s2">"emea-nl-ams-azr"</span> <span class="nt">--locations</span> <span class="nv">Id</span><span class="o">=</span><span class="s2">"us-fl-mia-edge"</span>
</code></pre></div></div>

<p><strong>Show Application Insights availability test result</strong></p>

<p>After running the command below, you should get a result from <em>Application Insights</em> that the tests failed.</p>

<blockquote>
  <p><strong>Tip</strong> Please wait 5-10 minutes before you run this command. Availability tests are run every 5 minutes.</p>
</blockquote>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az monitor log-analytics query <span class="nt">-w</span> <span class="nv">$LogAnalyticsWorkspaceId</span> <span class="nt">--analytics-query</span> <span class="s2">"AppAvailabilityResults | project TimeGenerated, Message, Location | order by TimeGenerated desc"</span> <span class="nt">-t</span> P0DT1H <span class="nt">-o</span> table
</code></pre></div></div>
<blockquote>
  <p><strong>Tip</strong> If you have multiple availability tests in one <em>Application Insight</em>, you can use the <em>Name</em> field for filtering.</p>
</blockquote>

<p>The result should look similar to this.</p>

<p><img src="/AppService/media/2022/11/403-ip-forbidden.png" alt="403-ip-forbidden" class="align-center" /></p>

<p><strong>Add service tags to multi-source rule</strong></p>

<p>To add a rule that will allow traffic from several service tags, run the following command.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az webapp config access-restriction add <span class="nt">--resource-group</span> <span class="nv">$ResourceGroupName</span> <span class="nt">--name</span> <span class="nv">$WebAppName</span> <span class="nt">--rule-name</span> AllowMultipleServiceTags <span class="nt">--action</span> Allow <span class="nt">--priority</span> 300 <span class="nt">--service-tag</span> LogicApps,ApiManagement.WestEurope,ApplicationInsightsAvailability
</code></pre></div></div>

<p><strong>Show Application Insight availability test result</strong></p>

<p>After running the command below, you should get a result from <em>Application Insight</em> that the tests passed.</p>

<blockquote>
  <p><strong>Tip</strong> Please wait 5-10 minutes before you run this command. Availability tests are run every 5 minutes.</p>
</blockquote>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az monitor log-analytics query <span class="nt">-w</span> <span class="nv">$LogAnalyticsWorkspaceId</span> <span class="nt">--analytics-query</span> <span class="s2">"AppAvailabilityResults | project TimeGenerated, Message, Location | order by TimeGenerated desc"</span> <span class="nt">-t</span> P0DT1H <span class="nt">-o</span> table
</code></pre></div></div>

<p>The result should look similar to this.</p>

<p><img src="/AppService/media/2022/11/passed.png" alt="Passed" class="align-center" /></p>

<h2 id="third-advanced-scenario---block-a-single-ip-address">Third advanced scenario - Block a single IP address</h2>

<p><strong>Remove previous rules</strong></p>

<p>To remove the rules from the previous scenario, run the command below.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az webapp config access-restriction remove <span class="nt">--resource-group</span> <span class="nv">$ResourceGroupName</span> <span class="nt">--name</span> <span class="nv">$WebAppName</span> <span class="nt">--rule-name</span> AllowBranchWarsawIPaddresses
az webapp config access-restriction remove <span class="nt">--resource-group</span> <span class="nv">$ResourceGroupName</span> <span class="nt">--name</span> <span class="nv">$WebAppName</span> <span class="nt">--rule-name</span> AllowMultipleServiceTags
</code></pre></div></div>

<p><strong>Change default behavior for <em>Unmatched rule action</em> to <em>Allow</em></strong></p>

<p>To change the default behavior to <em>Allow</em>, run the command below.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az resource update <span class="nt">--resource-group</span> <span class="nv">$ResourceGroupName</span> <span class="nt">--name</span> <span class="nv">$WebAppName</span> <span class="nt">--resource-type</span> <span class="s2">"Microsoft.Web/sites"</span> <span class="nt">--set</span> properties.siteConfig.ipSecurityRestrictionsDefaultAction<span class="o">=</span>Allow
</code></pre></div></div>

<p><strong>Check if your app allow connections</strong></p>

<p>Use your browser or <em>curl</em> command to check if your app allows connections.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl https://<span class="nv">$URLofYourWebsite</span>
</code></pre></div></div>

<p><strong>Block your public IP address</strong></p>

<p>To add a rule that will block traffic from your IP address, run the command below.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az webapp config access-restriction add <span class="nt">--resource-group</span> <span class="nv">$ResourceGroupName</span> <span class="nt">--name</span> <span class="nv">$WebAppName</span> <span class="nt">--rule-name</span> BlockSingleIpAddress <span class="nt">--action</span> Deny <span class="nt">--priority</span> 200 <span class="nt">--ip-address</span> <span class="nv">$YourPublicIPaddress</span>
</code></pre></div></div>

<p><strong>Check if your app is blocked by network restrictions</strong></p>

<p>Use your browser or <em>curl</em> command to check if your app is blocked by network restriction.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl https://<span class="nv">$URLofYourWebsite</span>
</code></pre></div></div>

<h2 id="fourth-advanced-scenario---restrict-access-to-the-scm-site">Fourth advanced scenario - Restrict access to the SCM site</h2>

<p>You can use the same access restriction rules from the <em>Main site</em> or create your own rule for the SCM (Advanced tool) site. The SCM site is responsible for <em>Web Deploy</em> and <em>Kudu console</em>.</p>

<p>For more information about <em>Kudu</em>, visit <a href="https://learn.microsoft.com/azure/app-service/resources-kudu">Kudu service overview</a>.</p>

<p><strong>Verify that you can deploy your sample app</strong></p>

<p>To verify that you can deploy your sample app via <em>Web Deploy</em>, run the command below.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az webapp deployment <span class="nb">source </span>config-zip <span class="nt">--resource-group</span> <span class="nv">$ResourceGroupName</span>  <span class="nt">--name</span> <span class="nv">$WebAppName</span> <span class="nt">--src</span> ./YourWebSite.zip
</code></pre></div></div>

<p><strong>Use the same access restrictions rules from <em>Main site</em> in <em>Advanced tool site</em></strong></p>

<p>To use the same rules from the <em>Main site</em> in the <em>Advanced tool site</em>, run this command.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az webapp config access-restriction <span class="nb">set</span> <span class="nt">--resource-group</span> <span class="nv">$ResourceGroupName</span>  <span class="nt">--name</span> <span class="nv">$WebAppName</span> <span class="nt">--use-same-restrictions-for-scm-site</span> <span class="nb">true</span>
</code></pre></div></div>

<p><strong>Verify that you can’t deploy your sample app</strong></p>

<p>To verify that you can’t deploy your sample app via <em>Web Deploy</em>, please run the command below.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az webapp deployment <span class="nb">source </span>config-zip <span class="nt">--resource-group</span> <span class="nv">$ResourceGroupName</span>  <span class="nt">--name</span> <span class="nv">$WebAppName</span> <span class="nt">--src</span> ./YourWebSite.zip
</code></pre></div></div>

<p><strong>Configure different rules for Advanced tool site</strong></p>

<p>To configure other rules for <em>Advanced tool site</em>, run below command.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az webapp config access-restriction <span class="nb">set</span> <span class="nt">--resource-group</span> <span class="nv">$ResourceGroupName</span>  <span class="nt">--name</span> <span class="nv">$WebAppName</span> <span class="nt">--use-same-restrictions-for-scm-site</span> <span class="nb">false</span>
</code></pre></div></div>

<p>To add a rule that will allow traffic from your IP address to the <em>SCM</em> site, run the bellow command.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az webapp config access-restriction add <span class="nt">--resource-group</span> <span class="nv">$ResourceGroupName</span> <span class="nt">--name</span> <span class="nv">$WebAppName</span> <span class="nt">--rule-name</span> BlockSingleIpAddress <span class="nt">--action</span> Allow <span class="nt">--scm-site</span> <span class="nb">true</span> <span class="nt">--priority</span> 200 <span class="nt">--ip-address</span> <span class="nv">$YourPublicIPaddress</span>
</code></pre></div></div>

<p><strong>Verify that you can deploy your sample app</strong></p>

<p>To verify that you can deploy your sample app via <em>Web Deploy</em>, please run the command below.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az webapp deployment <span class="nb">source </span>config-zip <span class="nt">--resource-group</span> <span class="nv">$ResourceGroupName</span>  <span class="nt">--name</span> <span class="nv">$WebAppName</span> <span class="nt">--src</span> ./YourWebSite.zip
</code></pre></div></div>

<p>You successfully completed the article.</p>]]></content><author><name>Azure App Service</name></author><category term="networking" /><summary type="html"><![CDATA[Currently, you can use two options when configuring Azure App Service access restrictions. The preview feature provides some new scenarios that you should know.]]></summary></entry><entry><title type="html">.NET 7 GA available on App Service</title><link href="https://azure.github.io/AppService/2022/11/08/dotnet7_ga.html" rel="alternate" type="text/html" title=".NET 7 GA available on App Service" /><published>2022-11-08T00:00:00+00:00</published><updated>2022-11-08T00:00:00+00:00</updated><id>https://azure.github.io/AppService/2022/11/08/dotnet7_ga</id><content type="html" xml:base="https://azure.github.io/AppService/2022/11/08/dotnet7_ga.html"><![CDATA[<p>We have completed the initial rollout for <a href="https://dotnet.microsoft.com/download/dotnet/7.0">.NET 7 GA</a> support on App Service. Like in previous years we are using the <a href="https://aka.ms/app-service-early-access">App Service Early Access feature</a> to enable day-0 support on the platform across all public regions on both Windows and Linux App Service Plans. The early access release will be followed by additional deployments to fully integrate the new bits across our fleet expecting to be fully done by the end of the week.</p>

<p>If you already have an app targeting and earlier preview of .NET 7.0 on the platform, there is no need to take action as the new runtime will be picked up on the next application restart once the update is available for your app. You can trigger this manually by starting and stopping your app.</p>

<p>Self-contained .NET apps will <em>not</em> be auto-updated since they have no dependency on the runtime provided by App Service.</p>

<p><a href="https://go.microsoft.com/fwlink/?linkid=2214834">Azure Functions</a> and <a href="https://go.microsoft.com/fwlink/?linkid=2215233">Azure Static Webapps</a> are also enabling .NET 7 workloads across their scenarios.</p>

<p>If you want to learn more, be sure to checkout our session during <a href="https://www.dotnetconf.net/agenda">.NET Conf 2022</a>:</p>

<ul>
  <li>Tuesday 11/09 @ 11:00am PST Join <a href="https://twitter.com/coolcsh">Scott Hunter</a> to talk about the latest happening in the world of building cloud native applications with .NET and Azure</li>
  <li>Thursday 11/10 @ 1:00am PST Join <a href="https://twitter.com/bktv99">@bktv99</a> and <a href="https://twitter.com/segaurav">@segaurav</a> will be taking the stage talk about  “.NET 7.0 and bulk migration of ASP.Net web apps to App Services”.</li>
</ul>

<p>Next steps:</p>

<ul>
  <li><a href="https://dotnet.microsoft.com/download/dotnet/7.0">Download .NET 7</a></li>
  <li><a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-7/">Anouncing .NET 7.0 </a></li>
  <li><a href="https://devblogs.microsoft.com/dotnet/announcing-asp-net-core-in-dotnet-7/">ASP.NET Core in .NET 7</a></li>
  <li><a href="https://docs.microsoft.com/azure/app-service/quickstart-dotnetcore?tabs=net60&amp;pivots=development-environment-vs">Deploy a .NET application to App Service</a></li>
</ul>

<p>You can also follow us on twitter for more updates and news: <a href="https://twitter.com/AzAppService/">@AzAppService</a></p>]]></content><author><name>Azure App Service</name></author><summary type="html"><![CDATA[We have completed the initial rollout for .NET 7 GA support on App Service. Like in previous years we are using the App Service Early Access feature to enable day-0 support on the platform across all public regions on both Windows and Linux App Service Plans. The early access release will be followed by additional deployments to fully integrate the new bits across our fleet expecting to be fully done by the end of the week. If you already have an app targeting and earlier preview of .NET 7.0 on the platform, there is no need to take action as the new runtime will be picked up on the next application restart once the update is available for your app. You can trigger this manually by starting and stopping your app. Self-contained .NET apps will not be auto-updated since they have no dependency on the runtime provided by App Service. Azure Functions and Azure Static Webapps are also enabling .NET 7 workloads across their scenarios. If you want to learn more, be sure to checkout our session during .NET Conf 2022: Tuesday 11/09 @ 11:00am PST Join Scott Hunter to talk about the latest happening in the world of building cloud native applications with .NET and Azure Thursday 11/10 @ 1:00am PST Join @bktv99 and @segaurav will be taking the stage talk about “.NET 7.0 and bulk migration of ASP.Net web apps to App Services”. Next steps: Download .NET 7 Anouncing .NET 7.0 ASP.NET Core in .NET 7 Deploy a .NET application to App Service You can also follow us on twitter for more updates and news: @AzAppService]]></summary></entry></feed>